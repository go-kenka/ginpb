// Code generated by protoc-gen-gin with resty client. DO NOT EDIT.
// versions:
// - protoc-gen-gin v1.0.0
// - protoc             v3.12.4
// source: complete_example.proto

package api

import (
	context "context"
	fmt "fmt"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	binding1 "github.com/go-kenka/ginpb/binding"
	client "github.com/go-kenka/ginpb/client"
	metadata "github.com/go-kenka/ginpb/metadata"
	middleware "github.com/go-kenka/ginpb/middleware"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the resty client it is being compiled against.
var _ = new(context.Context)
var _ = new(metadata.GinData)
var _ = new(gin.H)
var _ = new(client.Client)
var _ = binding.JSON
var _ = binding1.BindByContentType
var _ = middleware.Chain
var _ = fmt.Sprintf
var _ = strings.ReplaceAll

const OperationCompleteExampleServiceBatchDeleteUsers = "/example.CompleteExampleService/BatchDeleteUsers"
const OperationCompleteExampleServiceCreatePost = "/example.CompleteExampleService/CreatePost"
const OperationCompleteExampleServiceCreateUser = "/example.CompleteExampleService/CreateUser"
const OperationCompleteExampleServiceDeleteUser = "/example.CompleteExampleService/DeleteUser"
const OperationCompleteExampleServiceGetPostComments = "/example.CompleteExampleService/GetPostComments"
const OperationCompleteExampleServiceGetUser = "/example.CompleteExampleService/GetUser"
const OperationCompleteExampleServiceGetUserProfile = "/example.CompleteExampleService/GetUserProfile"
const OperationCompleteExampleServiceListUsers = "/example.CompleteExampleService/ListUsers"
const OperationCompleteExampleServicePatchUser = "/example.CompleteExampleService/PatchUser"
const OperationCompleteExampleServiceRegisterUser = "/example.CompleteExampleService/RegisterUser"
const OperationCompleteExampleServiceSearchUsers = "/example.CompleteExampleService/SearchUsers"
const OperationCompleteExampleServiceUpdateProfile = "/example.CompleteExampleService/UpdateProfile"
const OperationCompleteExampleServiceUpdateUser = "/example.CompleteExampleService/UpdateUser"

type CompleteExampleServiceHTTPServer interface {
	BatchDeleteUsers(context.Context, *BatchDeleteUsersRequest) (*BatchDeleteUsersResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	GetPostComments(context.Context, *GetPostCommentsRequest) (*GetPostCommentsResponse, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserResponse, error)
	GetUserProfile(context.Context, *GetUserProfileRequest) (*GetUserProfileResponse, error)
	ListUsers(context.Context, *ListUsersRequest) (*ListUsersResponse, error)
	PatchUser(context.Context, *PatchUserRequest) (*PatchUserResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
}

func RegisterCompleteExampleServiceHTTPServer(r gin.IRouter, srv CompleteExampleServiceHTTPServer) {
	r.GET("/api/v1/users", _CompleteExampleService_ListUsers0_HTTP_Handler(srv))
	r.GET("/api/v1/users/:user_id", _CompleteExampleService_GetUser0_HTTP_Handler(srv))
	r.GET("/api/v1/users/search", _CompleteExampleService_SearchUsers0_HTTP_Handler(srv))
	r.POST("/api/v1/users", _CompleteExampleService_CreateUser0_HTTP_Handler(srv))
	r.POST("/api/v1/users/register", _CompleteExampleService_RegisterUser0_HTTP_Handler(srv))
	r.POST("/api/v1/users/:user_id/posts", _CompleteExampleService_CreatePost0_HTTP_Handler(srv))
	r.PUT("/api/v1/users/:user_id", _CompleteExampleService_UpdateUser0_HTTP_Handler(srv))
	r.PUT("/api/v1/users/:user_id/profile", _CompleteExampleService_UpdateProfile0_HTTP_Handler(srv))
	r.PATCH("/api/v1/users/:user_id", _CompleteExampleService_PatchUser0_HTTP_Handler(srv))
	r.DELETE("/api/v1/users/:user_id", _CompleteExampleService_DeleteUser0_HTTP_Handler(srv))
	r.DELETE("/api/v1/users", _CompleteExampleService_BatchDeleteUsers0_HTTP_Handler(srv))
	r.GET("/api/v1/users/:user_id/posts/:post_id/comments", _CompleteExampleService_GetPostComments0_HTTP_Handler(srv))
	r.GET("/api/v1/profiles/:user_id", _CompleteExampleService_GetUserProfile0_HTTP_Handler(srv))
	r.GET("/api/v1/users/:user_id/profile", _CompleteExampleService_GetUserProfile1_HTTP_Handler(srv))
}

func RegisterCompleteExampleServiceHTTPServerWithMiddleware(r gin.IRouter, srv CompleteExampleServiceHTTPServer, middlewares ...gin.HandlerFunc) {
	r.GET("/api/v1/users", append(middlewares, _CompleteExampleService_ListUsers0_HTTP_Handler(srv))...)
	r.GET("/api/v1/users/:user_id", append(middlewares, _CompleteExampleService_GetUser0_HTTP_Handler(srv))...)
	r.GET("/api/v1/users/search", append(middlewares, _CompleteExampleService_SearchUsers0_HTTP_Handler(srv))...)
	r.POST("/api/v1/users", append(middlewares, _CompleteExampleService_CreateUser0_HTTP_Handler(srv))...)
	r.POST("/api/v1/users/register", append(middlewares, _CompleteExampleService_RegisterUser0_HTTP_Handler(srv))...)
	r.POST("/api/v1/users/:user_id/posts", append(middlewares, _CompleteExampleService_CreatePost0_HTTP_Handler(srv))...)
	r.PUT("/api/v1/users/:user_id", append(middlewares, _CompleteExampleService_UpdateUser0_HTTP_Handler(srv))...)
	r.PUT("/api/v1/users/:user_id/profile", append(middlewares, _CompleteExampleService_UpdateProfile0_HTTP_Handler(srv))...)
	r.PATCH("/api/v1/users/:user_id", append(middlewares, _CompleteExampleService_PatchUser0_HTTP_Handler(srv))...)
	r.DELETE("/api/v1/users/:user_id", append(middlewares, _CompleteExampleService_DeleteUser0_HTTP_Handler(srv))...)
	r.DELETE("/api/v1/users", append(middlewares, _CompleteExampleService_BatchDeleteUsers0_HTTP_Handler(srv))...)
	r.GET("/api/v1/users/:user_id/posts/:post_id/comments", append(middlewares, _CompleteExampleService_GetPostComments0_HTTP_Handler(srv))...)
	r.GET("/api/v1/profiles/:user_id", append(middlewares, _CompleteExampleService_GetUserProfile0_HTTP_Handler(srv))...)
	r.GET("/api/v1/users/:user_id/profile", append(middlewares, _CompleteExampleService_GetUserProfile1_HTTP_Handler(srv))...)
}

func RegisterCompleteExampleServiceHTTPServerWithOperationMiddleware(r gin.IRouter, srv CompleteExampleServiceHTTPServer, middlewares map[string][]gin.HandlerFunc) {
	if mws, exists := middlewares[OperationCompleteExampleServiceListUsers]; exists {
		r.GET("/api/v1/users", append(mws, _CompleteExampleService_ListUsers0_HTTP_Handler(srv))...)
	} else {
		r.GET("/api/v1/users", _CompleteExampleService_ListUsers0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceGetUser]; exists {
		r.GET("/api/v1/users/:user_id", append(mws, _CompleteExampleService_GetUser0_HTTP_Handler(srv))...)
	} else {
		r.GET("/api/v1/users/:user_id", _CompleteExampleService_GetUser0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceSearchUsers]; exists {
		r.GET("/api/v1/users/search", append(mws, _CompleteExampleService_SearchUsers0_HTTP_Handler(srv))...)
	} else {
		r.GET("/api/v1/users/search", _CompleteExampleService_SearchUsers0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceCreateUser]; exists {
		r.POST("/api/v1/users", append(mws, _CompleteExampleService_CreateUser0_HTTP_Handler(srv))...)
	} else {
		r.POST("/api/v1/users", _CompleteExampleService_CreateUser0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceRegisterUser]; exists {
		r.POST("/api/v1/users/register", append(mws, _CompleteExampleService_RegisterUser0_HTTP_Handler(srv))...)
	} else {
		r.POST("/api/v1/users/register", _CompleteExampleService_RegisterUser0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceCreatePost]; exists {
		r.POST("/api/v1/users/:user_id/posts", append(mws, _CompleteExampleService_CreatePost0_HTTP_Handler(srv))...)
	} else {
		r.POST("/api/v1/users/:user_id/posts", _CompleteExampleService_CreatePost0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceUpdateUser]; exists {
		r.PUT("/api/v1/users/:user_id", append(mws, _CompleteExampleService_UpdateUser0_HTTP_Handler(srv))...)
	} else {
		r.PUT("/api/v1/users/:user_id", _CompleteExampleService_UpdateUser0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceUpdateProfile]; exists {
		r.PUT("/api/v1/users/:user_id/profile", append(mws, _CompleteExampleService_UpdateProfile0_HTTP_Handler(srv))...)
	} else {
		r.PUT("/api/v1/users/:user_id/profile", _CompleteExampleService_UpdateProfile0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServicePatchUser]; exists {
		r.PATCH("/api/v1/users/:user_id", append(mws, _CompleteExampleService_PatchUser0_HTTP_Handler(srv))...)
	} else {
		r.PATCH("/api/v1/users/:user_id", _CompleteExampleService_PatchUser0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceDeleteUser]; exists {
		r.DELETE("/api/v1/users/:user_id", append(mws, _CompleteExampleService_DeleteUser0_HTTP_Handler(srv))...)
	} else {
		r.DELETE("/api/v1/users/:user_id", _CompleteExampleService_DeleteUser0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceBatchDeleteUsers]; exists {
		r.DELETE("/api/v1/users", append(mws, _CompleteExampleService_BatchDeleteUsers0_HTTP_Handler(srv))...)
	} else {
		r.DELETE("/api/v1/users", _CompleteExampleService_BatchDeleteUsers0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceGetPostComments]; exists {
		r.GET("/api/v1/users/:user_id/posts/:post_id/comments", append(mws, _CompleteExampleService_GetPostComments0_HTTP_Handler(srv))...)
	} else {
		r.GET("/api/v1/users/:user_id/posts/:post_id/comments", _CompleteExampleService_GetPostComments0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceGetUserProfile]; exists {
		r.GET("/api/v1/profiles/:user_id", append(mws, _CompleteExampleService_GetUserProfile0_HTTP_Handler(srv))...)
	} else {
		r.GET("/api/v1/profiles/:user_id", _CompleteExampleService_GetUserProfile0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationCompleteExampleServiceGetUserProfile]; exists {
		r.GET("/api/v1/users/:user_id/profile", append(mws, _CompleteExampleService_GetUserProfile1_HTTP_Handler(srv))...)
	} else {
		r.GET("/api/v1/users/:user_id/profile", _CompleteExampleService_GetUserProfile1_HTTP_Handler(srv))
	}
}

func _CompleteExampleService_ListUsers0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceListUsers)

		var ginReq listusersGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toListUsersRequest()

		// Custom field tags detected:

		// Field Page: binding:"min=1" form:"page" json:"page"
		// Field PageSize: binding:"min=1,max=100" form:"page_size" json:"page_size"
		// Field SortBy: binding:"oneof=id name email created_at" form:"sort_by" json:"sort_by"
		// Field SortOrder: binding:"oneof=asc desc" form:"sort_order" json:"sort_order"
		// Field Status: form:"status" json:"status"
		// Field Roles: form:"roles" json:"roles"
		// Field IncludeDeleted: form:"include_deleted" json:"include_deleted"
		// Field IncludeStats: form:"include_stats" json:"include_stats"
		// Field CreatedAfter: binding:"datetime=2006-01-02" form:"created_after" json:"created_after"
		// Field CreatedBefore: binding:"datetime=2006-01-02" form:"created_before" json:"created_before"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.ListUsers(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_GetUser0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceGetUser)

		var ginReq getuserGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toGetUserRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field Fields: form:"fields" json:"fields"
		// Field IncludeProfile: form:"include_profile" json:"include_profile"
		// Field IncludePosts: form:"include_posts" json:"include_posts"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.GetUser(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_SearchUsers0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceSearchUsers)

		var ginReq searchusersGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toSearchUsersRequest()

		// Custom field tags detected:

		// Field Query: binding:"required,min=2,max=100" form:"q" json:"query"
		// Field SearchFields: form:"search_fields" json:"search_fields"
		// Field Limit: binding:"min=1,max=50" form:"limit" json:"limit"
		// Field ClientId: binding:"required" header:"X-Client-ID" json:"client_id"
		// Field RequestId: header:"X-Request-ID" json:"request_id"
		// Field UserAgent: header:"User-Agent" json:"user_agent"
		// Field ApiKey: binding:"required,min=32,max=64" header:"X-API-Key" json:"api_key"
		// Field Latitude: binding:"min=-90,max=90" form:"lat" json:"latitude"
		// Field Longitude: binding:"min=-180,max=180" form:"lng" json:"longitude"
		// Field RadiusKm: binding:"min=1,max=1000" form:"radius" json:"radius_km"
		// Field MinAge: binding:"min=0,max=150" form:"min_age" json:"min_age"
		// Field MaxAge: binding:"min=0,max=150" form:"max_age" json:"max_age"
		// Field Country: form:"country" json:"country"
		// Field City: form:"city" json:"city"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.SearchUsers(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_CreateUser0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceCreateUser)

		var ginReq createuserGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toCreateUserRequest()

		// Custom field tags detected:

		// Field Username: binding:"required,min=3,max=50,alphanum" json:"username"
		// Field Email: binding:"required,email" json:"email"
		// Field Password: binding:"required,min=8,max=128" json:"password"
		// Field FullName: binding:"min=2,max=100" json:"full_name"
		// Field Phone: binding:"len=11,numeric" json:"phone"
		// Field Age: binding:"min=13,max=120" json:"age"
		// Field Gender: binding:"oneof=male female other" json:"gender"
		// Field Bio: binding:"max=500" json:"bio"
		// Field Address: json:"address"
		// Field Hobbies: binding:"min=1,max=10" json:"hobbies"
		// Field Languages: binding:"max=20" json:"languages"
		// Field SocialLinks: json:"social_links"
		// Field Preferences: json:"preferences"
		// Field Settings: json:"settings"
		// Field AgreeTerms: binding:"required,eq=true" json:"agree_terms"
		// Field SubscribeNewsletter: json:"subscribe_newsletter"
		// Field ReferralCode: json:"referral_code" xml:"referral_format"
		// Field Tags: json:"tags" xml:"max_length:20"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.CreateUser(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_RegisterUser0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceRegisterUser)

		var ginReq registeruserGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toRegisterUserRequest()

		// Custom field tags detected:

		// Field Username: binding:"required,min=3,max=30,alphanum" form:"username" json:"username"
		// Field Email: binding:"required,email" form:"email" json:"email"
		// Field Password: binding:"required,min=8" form:"password" json:"password"
		// Field ConfirmPassword: binding:"required,eqfield=Password" form:"confirm_password" json:"confirm_password"
		// Field FirstName: binding:"required,min=2,max=50" form:"first_name" json:"first_name"
		// Field LastName: binding:"required,min=2,max=50" form:"last_name" json:"last_name"
		// Field BirthDate: binding:"required,datetime=2006-01-02" form:"birth_date" json:"birth_date"
		// Field Phone: binding:"required,len=11,numeric" form:"phone" json:"phone"
		// Field Gender: binding:"oneof=male female other prefer_not_to_say" form:"gender" json:"gender"
		// Field Country: binding:"required,min=2,max=2" form:"country" json:"country"
		// Field Timezone: binding:"required" form:"timezone" json:"timezone"
		// Field Interests: form:"interests" json:"interests"
		// Field Skills: form:"skills" json:"skills"
		// Field NewsletterFrequency: binding:"oneof=never daily weekly monthly" form:"newsletter" json:"newsletter_frequency"
		// Field MarketingEmails: form:"marketing_emails" json:"marketing_emails"
		// Field CaptchaResponse: binding:"required,len=6" form:"captcha" json:"captcha_response"
		// Field InviteCode: form:"invite_code" json:"invite_code"
		// Field UtmSource: form:"utm_source" json:"utm_source"
		// Field UtmMedium: form:"utm_medium" json:"utm_medium"
		// Field UtmCampaign: form:"utm_campaign" json:"utm_campaign"
		// Field ReferrerUrl: form:"referrer" json:"referrer_url"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.RegisterUser(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_CreatePost0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceCreatePost)

		var ginReq createpostGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toCreatePostRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field Draft: form:"draft" json:"draft"
		// Field Source: binding:"oneof=web mobile app api" form:"source" json:"source"
		// Field NotifyFollowers: form:"notify_followers" json:"notify_followers"
		// Field Authorization: binding:"required,startswith=Bearer " header:"Authorization" json:"authorization"
		// Field ContentType: binding:"required" header:"Content-Type" json:"content_type"
		// Field UserAgent: header:"User-Agent" json:"user_agent"
		// Field ClientVersion: header:"X-Client-Version" json:"client_version"
		// Field RequestId: header:"X-Request-ID" json:"request_id"
		// Field Title: binding:"required,min=5,max=200" json:"title"
		// Field Content: binding:"required,min=50,max=50000" json:"content"
		// Field Excerpt: binding:"max=500" json:"excerpt"
		// Field Category: binding:"required" json:"category"
		// Field Tags: binding:"min=1,max=10" json:"tags"
		// Field Visibility: binding:"required,oneof=public private draft" json:"visibility"
		// Field AllowComments: json:"allow_comments"
		// Field PublishAt: binding:"datetime=2006-01-02T15:04:05Z07:00" json:"publish_at"
		// Field MetaTitle: binding:"max=60" json:"meta_title"
		// Field MetaDescription: binding:"max=160" json:"meta_description"
		// Field SeoKeywords: binding:"max=10" json:"seo_keywords"
		// Field ImageUrls: binding:"max=20" json:"images"
		// Field AttachmentUrls: binding:"max=10" json:"attachments"
		// Field CustomFields: json:"custom_fields" xml:"validate:post_custom_fields"
		// Field ExternalId: json:"external_id" xml:"external_id_format"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.CreatePost(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_UpdateUser0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceUpdateUser)

		var ginReq updateuserGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toUpdateUserRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field SendNotification: form:"send_notification" json:"send_notification"
		// Field UpdateReason: form:"reason" json:"update_reason"
		// Field IfMatch: header:"If-Match" json:"if_match"
		// Field Authorization: binding:"required" header:"Authorization" json:"authorization"
		// Field Username: binding:"required,min=3,max=50" json:"username"
		// Field Email: binding:"required,email" json:"email"
		// Field FullName: binding:"required,min=2,max=100" json:"full_name"
		// Field Phone: binding:"len=11,numeric" json:"phone"
		// Field Age: binding:"min=13,max=120" json:"age"
		// Field Bio: binding:"max=1000" json:"bio"
		// Field Status: binding:"required,oneof=active inactive suspended banned" json:"status"
		// Field Roles: binding:"min=1" json:"roles"
		// Field Address: json:"address"
		// Field SocialLinks: json:"social_links"
		// Field Settings: json:"settings"
		// Field UpdatedAt: binding:"required,datetime=2006-01-02T15:04:05Z07:00" json:"updated_at"
		// Field Version: binding:"required,min=1" json:"version"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.UpdateUser(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_UpdateProfile0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceUpdateProfile)

		var ginReq updateprofileGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toUpdateProfileRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field Profile: json:"profile"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.UpdateProfile(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_PatchUser0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServicePatchUser)

		var ginReq patchuserGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toPatchUserRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field IfMatch: header:"If-Match" json:"if_match"
		// Field IfUnmodifiedSince: header:"If-Unmodified-Since" json:"if_unmodified_since"
		// Field Authorization: binding:"required" header:"Authorization" json:"authorization"
		// Field PatchSource: header:"X-Patch-Source" json:"patch_source"
		// Field Username: binding:"min=3,max=50" json:"username"
		// Field Email: binding:"email" json:"email"
		// Field FullName: binding:"min=2,max=100" json:"full_name"
		// Field Phone: binding:"len=11,numeric" json:"phone"
		// Field Bio: binding:"max=1000" json:"bio"
		// Field Status: binding:"oneof=active inactive suspended" json:"status"
		// Field ProfilePatches: json:"profile_patches"
		// Field SettingsPatches: json:"settings_patches"
		// Field AddressPatches: json:"address_patches"
		// Field AddRoles: json:"add_roles"
		// Field RemoveRoles: json:"remove_roles"
		// Field AddTags: json:"add_tags"
		// Field RemoveTags: json:"remove_tags"
		// Field PatchReason: binding:"max=200" json:"patch_reason"
		// Field PatchMetadata: json:"patch_metadata"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.PatchUser(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_DeleteUser0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceDeleteUser)

		var ginReq deleteuserGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toDeleteUserRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field HardDelete: form:"hard_delete" json:"hard_delete"
		// Field DeleteReason: binding:"max=500" form:"reason" json:"delete_reason"
		// Field TransferData: form:"transfer_data" json:"transfer_data"
		// Field TransferToUser: binding:"uuid" form:"transfer_to" json:"transfer_to_user"
		// Field Confirmation: binding:"required,eq=DELETE" header:"X-Confirm-Delete" json:"confirmation"
		// Field Authorization: binding:"required" header:"Authorization" json:"authorization"
		// Field AdminToken: header:"X-Admin-Token" json:"admin_token"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.DeleteUser(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_BatchDeleteUsers0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceBatchDeleteUsers)

		var ginReq batchdeleteusersGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toBatchDeleteUsersRequest()

		// Custom field tags detected:

		// Field UserIds: binding:"required,min=1,max=100" form:"user_ids" json:"user_ids"
		// Field HardDelete: form:"hard_delete" json:"hard_delete"
		// Field DeleteReason: form:"reason" json:"delete_reason"
		// Field BatchConfirmation: binding:"required" header:"X-Batch-Confirm" json:"batch_confirmation"
		// Field Authorization: binding:"required" header:"Authorization" json:"authorization"
		// Field OperationId: header:"X-Operation-ID" json:"operation_id"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.BatchDeleteUsers(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_GetPostComments0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceGetPostComments)

		var ginReq getpostcommentsGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toGetPostCommentsRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field PostId: binding:"required,uuid" json:"post_id" uri:"post_id"
		// Field Page: binding:"min=1" form:"page" json:"page"
		// Field PerPage: binding:"min=1,max=100" form:"per_page" json:"per_page"
		// Field Sort: binding:"oneof=created_at updated_at likes replies" form:"sort" json:"sort"
		// Field Order: binding:"oneof=asc desc" form:"order" json:"order"
		// Field Status: binding:"oneof=all published hidden deleted" form:"status" json:"status"
		// Field IncludeReplies: form:"include_replies" json:"include_replies"
		// Field IncludeHidden: form:"include_hidden" json:"include_hidden"
		// Field Since: binding:"datetime=2006-01-02T15:04:05Z07:00" form:"since" json:"since"
		// Field Until: binding:"datetime=2006-01-02T15:04:05Z07:00" form:"until" json:"until"
		// Field UserContext: header:"X-User-Context" json:"user_context"
		// Field ClientTimezone: header:"X-Client-Timezone" json:"client_timezone"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.GetPostComments(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_GetUserProfile0_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceGetUserProfile)

		var ginReq getuserprofileGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toGetUserProfileRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field Sections: form:"sections" json:"sections"
		// Field IncludeStats: form:"include_stats" json:"include_stats"
		// Field IncludePosts: form:"include_posts" json:"include_posts"
		// Field IncludeFollowers: form:"include_followers" json:"include_followers"
		// Field ViewerContext: binding:"oneof=public friend follower self" form:"context" json:"viewer_context"
		// Field ViewerId: header:"X-Viewer-ID" json:"viewer_id"
		// Field AccessToken: header:"X-Access-Token" json:"access_token"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.GetUserProfile(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _CompleteExampleService_GetUserProfile1_HTTP_Handler(srv CompleteExampleServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationCompleteExampleServiceGetUserProfile)

		var ginReq getuserprofileGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toGetUserProfileRequest()

		// Custom field tags detected:

		// Field UserId: binding:"required,uuid" json:"user_id" uri:"user_id"
		// Field Sections: form:"sections" json:"sections"
		// Field IncludeStats: form:"include_stats" json:"include_stats"
		// Field IncludePosts: form:"include_posts" json:"include_posts"
		// Field IncludeFollowers: form:"include_followers" json:"include_followers"
		// Field ViewerContext: binding:"oneof=public friend follower self" form:"context" json:"viewer_context"
		// Field ViewerId: header:"X-Viewer-ID" json:"viewer_id"
		// Field AccessToken: header:"X-Access-Token" json:"access_token"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.GetUserProfile(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

type CompleteExampleServiceHTTPClient interface {
	BatchDeleteUsers(ctx context.Context, req *BatchDeleteUsersRequest, opts ...client.CallOption) (rsp *BatchDeleteUsersResponse, err error)
	CreatePost(ctx context.Context, req *CreatePostRequest, opts ...client.CallOption) (rsp *CreatePostResponse, err error)
	CreateUser(ctx context.Context, req *CreateUserRequest, opts ...client.CallOption) (rsp *CreateUserResponse, err error)
	DeleteUser(ctx context.Context, req *DeleteUserRequest, opts ...client.CallOption) (rsp *DeleteUserResponse, err error)
	GetPostComments(ctx context.Context, req *GetPostCommentsRequest, opts ...client.CallOption) (rsp *GetPostCommentsResponse, err error)
	GetUser(ctx context.Context, req *GetUserRequest, opts ...client.CallOption) (rsp *GetUserResponse, err error)
	GetUserProfile(ctx context.Context, req *GetUserProfileRequest, opts ...client.CallOption) (rsp *GetUserProfileResponse, err error)
	ListUsers(ctx context.Context, req *ListUsersRequest, opts ...client.CallOption) (rsp *ListUsersResponse, err error)
	PatchUser(ctx context.Context, req *PatchUserRequest, opts ...client.CallOption) (rsp *PatchUserResponse, err error)
	RegisterUser(ctx context.Context, req *RegisterUserRequest, opts ...client.CallOption) (rsp *RegisterUserResponse, err error)
	SearchUsers(ctx context.Context, req *SearchUsersRequest, opts ...client.CallOption) (rsp *SearchUsersResponse, err error)
	UpdateProfile(ctx context.Context, req *UpdateProfileRequest, opts ...client.CallOption) (rsp *UpdateProfileResponse, err error)
	UpdateUser(ctx context.Context, req *UpdateUserRequest, opts ...client.CallOption) (rsp *UpdateUserResponse, err error)
}

type CompleteExampleServiceHTTPClientImpl struct {
	client client.Client
}

func NewCompleteExampleServiceHTTPClient(opts ...client.ClientOption) CompleteExampleServiceHTTPClient {
	c := client.NewClient(opts...)
	return &CompleteExampleServiceHTTPClientImpl{client: c}
}

func (c *CompleteExampleServiceHTTPClientImpl) BatchDeleteUsers(ctx context.Context, in *BatchDeleteUsersRequest, opts ...client.CallOption) (*BatchDeleteUsersResponse, error) {
	var out BatchDeleteUsersResponse

	// 构建请求路径
	path := "/api/v1/users"
	// DELETE请求
	err := c.client.Invoke(ctx, "DELETE", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("DELETE /api/v1/users failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...client.CallOption) (*CreatePostResponse, error) {
	var out CreatePostResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}/posts"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// POST请求
	err := c.client.Invoke(ctx, "POST", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("POST /api/v1/users/{user_id}/posts failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...client.CallOption) (*CreateUserResponse, error) {
	var out CreateUserResponse

	// 构建请求路径
	path := "/api/v1/users"
	// POST请求
	err := c.client.Invoke(ctx, "POST", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("POST /api/v1/users failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...client.CallOption) (*DeleteUserResponse, error) {
	var out DeleteUserResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// DELETE请求
	err := c.client.Invoke(ctx, "DELETE", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("DELETE /api/v1/users/{user_id} failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) GetPostComments(ctx context.Context, in *GetPostCommentsRequest, opts ...client.CallOption) (*GetPostCommentsResponse, error) {
	var out GetPostCommentsResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}/posts/{post_id}/comments"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	path = strings.ReplaceAll(path, "{post_id}", fmt.Sprintf("%v", in.PostId))
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /api/v1/users/{user_id}/posts/{post_id}/comments failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) GetUser(ctx context.Context, in *GetUserRequest, opts ...client.CallOption) (*GetUserResponse, error) {
	var out GetUserResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /api/v1/users/{user_id} failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) GetUserProfile(ctx context.Context, in *GetUserProfileRequest, opts ...client.CallOption) (*GetUserProfileResponse, error) {
	var out GetUserProfileResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}/profile"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /api/v1/users/{user_id}/profile failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) ListUsers(ctx context.Context, in *ListUsersRequest, opts ...client.CallOption) (*ListUsersResponse, error) {
	var out ListUsersResponse

	// 构建请求路径
	path := "/api/v1/users"
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /api/v1/users failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) PatchUser(ctx context.Context, in *PatchUserRequest, opts ...client.CallOption) (*PatchUserResponse, error) {
	var out PatchUserResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// PATCH请求
	err := c.client.Invoke(ctx, "PATCH", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("PATCH /api/v1/users/{user_id} failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...client.CallOption) (*RegisterUserResponse, error) {
	var out RegisterUserResponse

	// 构建请求路径
	path := "/api/v1/users/register"
	// POST请求
	err := c.client.Invoke(ctx, "POST", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("POST /api/v1/users/register failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...client.CallOption) (*SearchUsersResponse, error) {
	var out SearchUsersResponse

	// 构建请求路径
	path := "/api/v1/users/search"
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /api/v1/users/search failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...client.CallOption) (*UpdateProfileResponse, error) {
	var out UpdateProfileResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}/profile"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// PUT请求
	err := c.client.Invoke(ctx, "PUT", path, in.Profile, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("PUT /api/v1/users/{user_id}/profile failed: %w", err)
	}
	return &out, nil
}

func (c *CompleteExampleServiceHTTPClientImpl) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...client.CallOption) (*UpdateUserResponse, error) {
	var out UpdateUserResponse

	// 构建请求路径
	path := "/api/v1/users/{user_id}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{user_id}", fmt.Sprintf("%v", in.UserId))
	// PUT请求
	err := c.client.Invoke(ctx, "PUT", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("PUT /api/v1/users/{user_id} failed: %w", err)
	}
	return &out, nil
}

// Internal structs with gin binding tags for protobuf messages

// batchdeleteusersGinRequest provides gin binding tags for BatchDeleteUsersRequest
type batchdeleteusersGinRequest struct {
	UserIds           []string `json:"user_ids" form:"user_ids" binding:"required,min=1,max=100"`
	HardDelete        bool     `json:"hard_delete" form:"hard_delete"`
	DeleteReason      string   `json:"delete_reason" form:"reason"`
	BatchConfirmation string   `json:"batch_confirmation" header:"X-Batch-Confirm" binding:"required"`
	Authorization     string   `json:"authorization" header:"Authorization" binding:"required"`
	OperationId       string   `json:"operation_id" header:"X-Operation-ID"`
}

// convertBatchDeleteUsersGinRequest converts from gin request struct to protobuf struct
func (r *batchdeleteusersGinRequest) toBatchDeleteUsersRequest() *BatchDeleteUsersRequest {
	return &BatchDeleteUsersRequest{
		UserIds:           r.UserIds,
		HardDelete:        r.HardDelete,
		DeleteReason:      r.DeleteReason,
		BatchConfirmation: r.BatchConfirmation,
		Authorization:     r.Authorization,
		OperationId:       r.OperationId,
	}
}

// fromBatchDeleteUsersRequest converts from protobuf struct to gin request struct
func fromBatchDeleteUsersRequest(req *BatchDeleteUsersRequest) *batchdeleteusersGinRequest {
	return &batchdeleteusersGinRequest{
		UserIds:           req.UserIds,
		HardDelete:        req.HardDelete,
		DeleteReason:      req.DeleteReason,
		BatchConfirmation: req.BatchConfirmation,
		Authorization:     req.Authorization,
		OperationId:       req.OperationId,
	}
}

// createpostGinRequest provides gin binding tags for CreatePostRequest
type createpostGinRequest struct {
	UserId          string            `json:"user_id" uri:"user_id" binding:"required,uuid"`
	Draft           bool              `json:"draft" form:"draft"`
	Source          string            `json:"source" form:"source" binding:"oneof=web mobile app api"`
	NotifyFollowers bool              `json:"notify_followers" form:"notify_followers"`
	Authorization   string            `json:"authorization" header:"Authorization" binding:"required,startswith=Bearer "`
	ContentType     string            `json:"content_type" header:"Content-Type" binding:"required"`
	UserAgent       string            `json:"user_agent" header:"User-Agent"`
	ClientVersion   string            `json:"client_version" header:"X-Client-Version"`
	RequestId       string            `json:"request_id" header:"X-Request-ID"`
	Title           string            `json:"title" binding:"required,min=5,max=200"`
	Content         string            `json:"content" binding:"required,min=50,max=50000"`
	Excerpt         string            `json:"excerpt" binding:"max=500"`
	Category        string            `json:"category" binding:"required"`
	Tags            []string          `json:"tags" binding:"min=1,max=10"`
	Visibility      string            `json:"visibility" binding:"required,oneof=public private draft"`
	AllowComments   bool              `json:"allow_comments"`
	PublishAt       string            `json:"publish_at" binding:"datetime=2006-01-02T15:04:05Z07:00"`
	MetaTitle       string            `json:"meta_title" binding:"max=60"`
	MetaDescription string            `json:"meta_description" binding:"max=160"`
	SeoKeywords     []string          `json:"seo_keywords" binding:"max=10"`
	ImageUrls       []string          `json:"images" binding:"max=20"`
	AttachmentUrls  []string          `json:"attachments" binding:"max=10"`
	CustomFields    map[string]string `json:"custom_fields" xml:"validate:post_custom_fields"`
	ExternalId      string            `json:"external_id" xml:"external_id_format"`
}

// convertCreatePostGinRequest converts from gin request struct to protobuf struct
func (r *createpostGinRequest) toCreatePostRequest() *CreatePostRequest {
	return &CreatePostRequest{
		UserId:          r.UserId,
		Draft:           r.Draft,
		Source:          r.Source,
		NotifyFollowers: r.NotifyFollowers,
		Authorization:   r.Authorization,
		ContentType:     r.ContentType,
		UserAgent:       r.UserAgent,
		ClientVersion:   r.ClientVersion,
		RequestId:       r.RequestId,
		Title:           r.Title,
		Content:         r.Content,
		Excerpt:         r.Excerpt,
		Category:        r.Category,
		Tags:            r.Tags,
		Visibility:      r.Visibility,
		AllowComments:   r.AllowComments,
		PublishAt:       r.PublishAt,
		MetaTitle:       r.MetaTitle,
		MetaDescription: r.MetaDescription,
		SeoKeywords:     r.SeoKeywords,
		ImageUrls:       r.ImageUrls,
		AttachmentUrls:  r.AttachmentUrls,
		CustomFields:    r.CustomFields,
		ExternalId:      r.ExternalId,
	}
}

// fromCreatePostRequest converts from protobuf struct to gin request struct
func fromCreatePostRequest(req *CreatePostRequest) *createpostGinRequest {
	return &createpostGinRequest{
		UserId:          req.UserId,
		Draft:           req.Draft,
		Source:          req.Source,
		NotifyFollowers: req.NotifyFollowers,
		Authorization:   req.Authorization,
		ContentType:     req.ContentType,
		UserAgent:       req.UserAgent,
		ClientVersion:   req.ClientVersion,
		RequestId:       req.RequestId,
		Title:           req.Title,
		Content:         req.Content,
		Excerpt:         req.Excerpt,
		Category:        req.Category,
		Tags:            req.Tags,
		Visibility:      req.Visibility,
		AllowComments:   req.AllowComments,
		PublishAt:       req.PublishAt,
		MetaTitle:       req.MetaTitle,
		MetaDescription: req.MetaDescription,
		SeoKeywords:     req.SeoKeywords,
		ImageUrls:       req.ImageUrls,
		AttachmentUrls:  req.AttachmentUrls,
		CustomFields:    req.CustomFields,
		ExternalId:      req.ExternalId,
	}
}

// createuserGinRequest provides gin binding tags for CreateUserRequest
type createuserGinRequest struct {
	Username            string            `json:"username" binding:"required,min=3,max=50,alphanum"`
	Email               string            `json:"email" binding:"required,email"`
	Password            string            `json:"password" binding:"required,min=8,max=128"`
	FullName            string            `json:"full_name" binding:"min=2,max=100"`
	Phone               string            `json:"phone" binding:"len=11,numeric"`
	Age                 int32             `json:"age" binding:"min=13,max=120"`
	Gender              string            `json:"gender" binding:"oneof=male female other"`
	Bio                 string            `json:"bio" binding:"max=500"`
	Address             *Address          `json:"address"`
	Hobbies             []string          `json:"hobbies" binding:"min=1,max=10"`
	Languages           []string          `json:"languages" binding:"max=20"`
	SocialLinks         map[string]string `json:"social_links"`
	Preferences         map[string]string `json:"preferences"`
	Settings            *UserSettings     `json:"settings"`
	AgreeTerms          bool              `json:"agree_terms" binding:"required,eq=true"`
	SubscribeNewsletter bool              `json:"subscribe_newsletter"`
	ReferralCode        string            `json:"referral_code" xml:"referral_format"`
	Tags                []string          `json:"tags" xml:"max_length:20"`
}

// convertCreateUserGinRequest converts from gin request struct to protobuf struct
func (r *createuserGinRequest) toCreateUserRequest() *CreateUserRequest {
	return &CreateUserRequest{
		Username:            r.Username,
		Email:               r.Email,
		Password:            r.Password,
		FullName:            r.FullName,
		Phone:               r.Phone,
		Age:                 r.Age,
		Gender:              r.Gender,
		Bio:                 r.Bio,
		Address:             r.Address,
		Hobbies:             r.Hobbies,
		Languages:           r.Languages,
		SocialLinks:         r.SocialLinks,
		Preferences:         r.Preferences,
		Settings:            r.Settings,
		AgreeTerms:          r.AgreeTerms,
		SubscribeNewsletter: r.SubscribeNewsletter,
		ReferralCode:        r.ReferralCode,
		Tags:                r.Tags,
	}
}

// fromCreateUserRequest converts from protobuf struct to gin request struct
func fromCreateUserRequest(req *CreateUserRequest) *createuserGinRequest {
	return &createuserGinRequest{
		Username:            req.Username,
		Email:               req.Email,
		Password:            req.Password,
		FullName:            req.FullName,
		Phone:               req.Phone,
		Age:                 req.Age,
		Gender:              req.Gender,
		Bio:                 req.Bio,
		Address:             req.Address,
		Hobbies:             req.Hobbies,
		Languages:           req.Languages,
		SocialLinks:         req.SocialLinks,
		Preferences:         req.Preferences,
		Settings:            req.Settings,
		AgreeTerms:          req.AgreeTerms,
		SubscribeNewsletter: req.SubscribeNewsletter,
		ReferralCode:        req.ReferralCode,
		Tags:                req.Tags,
	}
}

// deleteuserGinRequest provides gin binding tags for DeleteUserRequest
type deleteuserGinRequest struct {
	UserId         string `json:"user_id" uri:"user_id" binding:"required,uuid"`
	HardDelete     bool   `json:"hard_delete" form:"hard_delete"`
	DeleteReason   string `json:"delete_reason" form:"reason" binding:"max=500"`
	TransferData   bool   `json:"transfer_data" form:"transfer_data"`
	TransferToUser string `json:"transfer_to_user" form:"transfer_to" binding:"uuid"`
	Confirmation   string `json:"confirmation" header:"X-Confirm-Delete" binding:"required,eq=DELETE"`
	Authorization  string `json:"authorization" header:"Authorization" binding:"required"`
	AdminToken     string `json:"admin_token" header:"X-Admin-Token"`
}

// convertDeleteUserGinRequest converts from gin request struct to protobuf struct
func (r *deleteuserGinRequest) toDeleteUserRequest() *DeleteUserRequest {
	return &DeleteUserRequest{
		UserId:         r.UserId,
		HardDelete:     r.HardDelete,
		DeleteReason:   r.DeleteReason,
		TransferData:   r.TransferData,
		TransferToUser: r.TransferToUser,
		Confirmation:   r.Confirmation,
		Authorization:  r.Authorization,
		AdminToken:     r.AdminToken,
	}
}

// fromDeleteUserRequest converts from protobuf struct to gin request struct
func fromDeleteUserRequest(req *DeleteUserRequest) *deleteuserGinRequest {
	return &deleteuserGinRequest{
		UserId:         req.UserId,
		HardDelete:     req.HardDelete,
		DeleteReason:   req.DeleteReason,
		TransferData:   req.TransferData,
		TransferToUser: req.TransferToUser,
		Confirmation:   req.Confirmation,
		Authorization:  req.Authorization,
		AdminToken:     req.AdminToken,
	}
}

// getpostcommentsGinRequest provides gin binding tags for GetPostCommentsRequest
type getpostcommentsGinRequest struct {
	UserId         string `json:"user_id" uri:"user_id" binding:"required,uuid"`
	PostId         string `json:"post_id" uri:"post_id" binding:"required,uuid"`
	Page           int32  `json:"page" form:"page" binding:"min=1"`
	PerPage        int32  `json:"per_page" form:"per_page" binding:"min=1,max=100"`
	Sort           string `json:"sort" form:"sort" binding:"oneof=created_at updated_at likes replies"`
	Order          string `json:"order" form:"order" binding:"oneof=asc desc"`
	Status         string `json:"status" form:"status" binding:"oneof=all published hidden deleted"`
	IncludeReplies bool   `json:"include_replies" form:"include_replies"`
	IncludeHidden  bool   `json:"include_hidden" form:"include_hidden"`
	Since          string `json:"since" form:"since" binding:"datetime=2006-01-02T15:04:05Z07:00"`
	Until          string `json:"until" form:"until" binding:"datetime=2006-01-02T15:04:05Z07:00"`
	UserContext    string `json:"user_context" header:"X-User-Context"`
	ClientTimezone string `json:"client_timezone" header:"X-Client-Timezone"`
}

// convertGetPostCommentsGinRequest converts from gin request struct to protobuf struct
func (r *getpostcommentsGinRequest) toGetPostCommentsRequest() *GetPostCommentsRequest {
	return &GetPostCommentsRequest{
		UserId:         r.UserId,
		PostId:         r.PostId,
		Page:           r.Page,
		PerPage:        r.PerPage,
		Sort:           r.Sort,
		Order:          r.Order,
		Status:         r.Status,
		IncludeReplies: r.IncludeReplies,
		IncludeHidden:  r.IncludeHidden,
		Since:          r.Since,
		Until:          r.Until,
		UserContext:    r.UserContext,
		ClientTimezone: r.ClientTimezone,
	}
}

// fromGetPostCommentsRequest converts from protobuf struct to gin request struct
func fromGetPostCommentsRequest(req *GetPostCommentsRequest) *getpostcommentsGinRequest {
	return &getpostcommentsGinRequest{
		UserId:         req.UserId,
		PostId:         req.PostId,
		Page:           req.Page,
		PerPage:        req.PerPage,
		Sort:           req.Sort,
		Order:          req.Order,
		Status:         req.Status,
		IncludeReplies: req.IncludeReplies,
		IncludeHidden:  req.IncludeHidden,
		Since:          req.Since,
		Until:          req.Until,
		UserContext:    req.UserContext,
		ClientTimezone: req.ClientTimezone,
	}
}

// getuserGinRequest provides gin binding tags for GetUserRequest
type getuserGinRequest struct {
	UserId         string   `json:"user_id" uri:"user_id" binding:"required,uuid"`
	Fields         []string `json:"fields" form:"fields"`
	IncludeProfile bool     `json:"include_profile" form:"include_profile"`
	IncludePosts   bool     `json:"include_posts" form:"include_posts"`
}

// convertGetUserGinRequest converts from gin request struct to protobuf struct
func (r *getuserGinRequest) toGetUserRequest() *GetUserRequest {
	return &GetUserRequest{
		UserId:         r.UserId,
		Fields:         r.Fields,
		IncludeProfile: r.IncludeProfile,
		IncludePosts:   r.IncludePosts,
	}
}

// fromGetUserRequest converts from protobuf struct to gin request struct
func fromGetUserRequest(req *GetUserRequest) *getuserGinRequest {
	return &getuserGinRequest{
		UserId:         req.UserId,
		Fields:         req.Fields,
		IncludeProfile: req.IncludeProfile,
		IncludePosts:   req.IncludePosts,
	}
}

// getuserprofileGinRequest provides gin binding tags for GetUserProfileRequest
type getuserprofileGinRequest struct {
	UserId           string   `json:"user_id" uri:"user_id" binding:"required,uuid"`
	Sections         []string `json:"sections" form:"sections"`
	IncludeStats     bool     `json:"include_stats" form:"include_stats"`
	IncludePosts     bool     `json:"include_posts" form:"include_posts"`
	IncludeFollowers bool     `json:"include_followers" form:"include_followers"`
	ViewerContext    string   `json:"viewer_context" form:"context" binding:"oneof=public friend follower self"`
	ViewerId         string   `json:"viewer_id" header:"X-Viewer-ID"`
	AccessToken      string   `json:"access_token" header:"X-Access-Token"`
}

// convertGetUserProfileGinRequest converts from gin request struct to protobuf struct
func (r *getuserprofileGinRequest) toGetUserProfileRequest() *GetUserProfileRequest {
	return &GetUserProfileRequest{
		UserId:           r.UserId,
		Sections:         r.Sections,
		IncludeStats:     r.IncludeStats,
		IncludePosts:     r.IncludePosts,
		IncludeFollowers: r.IncludeFollowers,
		ViewerContext:    r.ViewerContext,
		ViewerId:         r.ViewerId,
		AccessToken:      r.AccessToken,
	}
}

// fromGetUserProfileRequest converts from protobuf struct to gin request struct
func fromGetUserProfileRequest(req *GetUserProfileRequest) *getuserprofileGinRequest {
	return &getuserprofileGinRequest{
		UserId:           req.UserId,
		Sections:         req.Sections,
		IncludeStats:     req.IncludeStats,
		IncludePosts:     req.IncludePosts,
		IncludeFollowers: req.IncludeFollowers,
		ViewerContext:    req.ViewerContext,
		ViewerId:         req.ViewerId,
		AccessToken:      req.AccessToken,
	}
}

// listusersGinRequest provides gin binding tags for ListUsersRequest
type listusersGinRequest struct {
	Page           int32    `json:"page" form:"page" binding:"min=1"`
	PageSize       int32    `json:"page_size" form:"page_size" binding:"min=1,max=100"`
	SortBy         string   `json:"sort_by" form:"sort_by" binding:"oneof=id name email created_at"`
	SortOrder      string   `json:"sort_order" form:"sort_order" binding:"oneof=asc desc"`
	Status         []string `json:"status" form:"status"`
	Roles          []string `json:"roles" form:"roles"`
	IncludeDeleted bool     `json:"include_deleted" form:"include_deleted"`
	IncludeStats   bool     `json:"include_stats" form:"include_stats"`
	CreatedAfter   string   `json:"created_after" form:"created_after" binding:"datetime=2006-01-02"`
	CreatedBefore  string   `json:"created_before" form:"created_before" binding:"datetime=2006-01-02"`
}

// convertListUsersGinRequest converts from gin request struct to protobuf struct
func (r *listusersGinRequest) toListUsersRequest() *ListUsersRequest {
	return &ListUsersRequest{
		Page:           r.Page,
		PageSize:       r.PageSize,
		SortBy:         r.SortBy,
		SortOrder:      r.SortOrder,
		Status:         r.Status,
		Roles:          r.Roles,
		IncludeDeleted: r.IncludeDeleted,
		IncludeStats:   r.IncludeStats,
		CreatedAfter:   r.CreatedAfter,
		CreatedBefore:  r.CreatedBefore,
	}
}

// fromListUsersRequest converts from protobuf struct to gin request struct
func fromListUsersRequest(req *ListUsersRequest) *listusersGinRequest {
	return &listusersGinRequest{
		Page:           req.Page,
		PageSize:       req.PageSize,
		SortBy:         req.SortBy,
		SortOrder:      req.SortOrder,
		Status:         req.Status,
		Roles:          req.Roles,
		IncludeDeleted: req.IncludeDeleted,
		IncludeStats:   req.IncludeStats,
		CreatedAfter:   req.CreatedAfter,
		CreatedBefore:  req.CreatedBefore,
	}
}

// patchuserGinRequest provides gin binding tags for PatchUserRequest
type patchuserGinRequest struct {
	UserId            string            `json:"user_id" uri:"user_id" binding:"required,uuid"`
	IfMatch           string            `json:"if_match" header:"If-Match"`
	IfUnmodifiedSince string            `json:"if_unmodified_since" header:"If-Unmodified-Since"`
	Authorization     string            `json:"authorization" header:"Authorization" binding:"required"`
	PatchSource       string            `json:"patch_source" header:"X-Patch-Source"`
	Username          string            `json:"username" binding:"min=3,max=50"`
	Email             string            `json:"email" binding:"email"`
	FullName          string            `json:"full_name" binding:"min=2,max=100"`
	Phone             string            `json:"phone" binding:"len=11,numeric"`
	Bio               string            `json:"bio" binding:"max=1000"`
	Status            string            `json:"status" binding:"oneof=active inactive suspended"`
	ProfilePatches    map[string]string `json:"profile_patches"`
	SettingsPatches   map[string]string `json:"settings_patches"`
	AddressPatches    map[string]string `json:"address_patches"`
	AddRoles          []string          `json:"add_roles"`
	RemoveRoles       []string          `json:"remove_roles"`
	AddTags           []string          `json:"add_tags"`
	RemoveTags        []string          `json:"remove_tags"`
	PatchReason       string            `json:"patch_reason" binding:"max=200"`
	PatchMetadata     map[string]string `json:"patch_metadata"`
}

// convertPatchUserGinRequest converts from gin request struct to protobuf struct
func (r *patchuserGinRequest) toPatchUserRequest() *PatchUserRequest {
	return &PatchUserRequest{
		UserId:            r.UserId,
		IfMatch:           r.IfMatch,
		IfUnmodifiedSince: r.IfUnmodifiedSince,
		Authorization:     r.Authorization,
		PatchSource:       r.PatchSource,
		Username:          r.Username,
		Email:             r.Email,
		FullName:          r.FullName,
		Phone:             r.Phone,
		Bio:               r.Bio,
		Status:            r.Status,
		ProfilePatches:    r.ProfilePatches,
		SettingsPatches:   r.SettingsPatches,
		AddressPatches:    r.AddressPatches,
		AddRoles:          r.AddRoles,
		RemoveRoles:       r.RemoveRoles,
		AddTags:           r.AddTags,
		RemoveTags:        r.RemoveTags,
		PatchReason:       r.PatchReason,
		PatchMetadata:     r.PatchMetadata,
	}
}

// fromPatchUserRequest converts from protobuf struct to gin request struct
func fromPatchUserRequest(req *PatchUserRequest) *patchuserGinRequest {
	return &patchuserGinRequest{
		UserId:            req.UserId,
		IfMatch:           req.IfMatch,
		IfUnmodifiedSince: req.IfUnmodifiedSince,
		Authorization:     req.Authorization,
		PatchSource:       req.PatchSource,
		Username:          req.Username,
		Email:             req.Email,
		FullName:          req.FullName,
		Phone:             req.Phone,
		Bio:               req.Bio,
		Status:            req.Status,
		ProfilePatches:    req.ProfilePatches,
		SettingsPatches:   req.SettingsPatches,
		AddressPatches:    req.AddressPatches,
		AddRoles:          req.AddRoles,
		RemoveRoles:       req.RemoveRoles,
		AddTags:           req.AddTags,
		RemoveTags:        req.RemoveTags,
		PatchReason:       req.PatchReason,
		PatchMetadata:     req.PatchMetadata,
	}
}

// registeruserGinRequest provides gin binding tags for RegisterUserRequest
type registeruserGinRequest struct {
	Username            string   `json:"username" form:"username" binding:"required,min=3,max=30,alphanum"`
	Email               string   `json:"email" form:"email" binding:"required,email"`
	Password            string   `json:"password" form:"password" binding:"required,min=8"`
	ConfirmPassword     string   `json:"confirm_password" form:"confirm_password" binding:"required,eqfield=Password"`
	FirstName           string   `json:"first_name" form:"first_name" binding:"required,min=2,max=50"`
	LastName            string   `json:"last_name" form:"last_name" binding:"required,min=2,max=50"`
	BirthDate           string   `json:"birth_date" form:"birth_date" binding:"required,datetime=2006-01-02"`
	Phone               string   `json:"phone" form:"phone" binding:"required,len=11,numeric"`
	Gender              string   `json:"gender" form:"gender" binding:"oneof=male female other prefer_not_to_say"`
	Country             string   `json:"country" form:"country" binding:"required,min=2,max=2"`
	Timezone            string   `json:"timezone" form:"timezone" binding:"required"`
	Interests           []string `json:"interests" form:"interests"`
	Skills              []string `json:"skills" form:"skills"`
	NewsletterFrequency string   `json:"newsletter_frequency" form:"newsletter" binding:"oneof=never daily weekly monthly"`
	MarketingEmails     bool     `json:"marketing_emails" form:"marketing_emails"`
	CaptchaResponse     string   `json:"captcha_response" form:"captcha" binding:"required,len=6"`
	InviteCode          string   `json:"invite_code" form:"invite_code"`
	UtmSource           string   `json:"utm_source" form:"utm_source"`
	UtmMedium           string   `json:"utm_medium" form:"utm_medium"`
	UtmCampaign         string   `json:"utm_campaign" form:"utm_campaign"`
	ReferrerUrl         string   `json:"referrer_url" form:"referrer"`
}

// convertRegisterUserGinRequest converts from gin request struct to protobuf struct
func (r *registeruserGinRequest) toRegisterUserRequest() *RegisterUserRequest {
	return &RegisterUserRequest{
		Username:            r.Username,
		Email:               r.Email,
		Password:            r.Password,
		ConfirmPassword:     r.ConfirmPassword,
		FirstName:           r.FirstName,
		LastName:            r.LastName,
		BirthDate:           r.BirthDate,
		Phone:               r.Phone,
		Gender:              r.Gender,
		Country:             r.Country,
		Timezone:            r.Timezone,
		Interests:           r.Interests,
		Skills:              r.Skills,
		NewsletterFrequency: r.NewsletterFrequency,
		MarketingEmails:     r.MarketingEmails,
		CaptchaResponse:     r.CaptchaResponse,
		InviteCode:          r.InviteCode,
		UtmSource:           r.UtmSource,
		UtmMedium:           r.UtmMedium,
		UtmCampaign:         r.UtmCampaign,
		ReferrerUrl:         r.ReferrerUrl,
	}
}

// fromRegisterUserRequest converts from protobuf struct to gin request struct
func fromRegisterUserRequest(req *RegisterUserRequest) *registeruserGinRequest {
	return &registeruserGinRequest{
		Username:            req.Username,
		Email:               req.Email,
		Password:            req.Password,
		ConfirmPassword:     req.ConfirmPassword,
		FirstName:           req.FirstName,
		LastName:            req.LastName,
		BirthDate:           req.BirthDate,
		Phone:               req.Phone,
		Gender:              req.Gender,
		Country:             req.Country,
		Timezone:            req.Timezone,
		Interests:           req.Interests,
		Skills:              req.Skills,
		NewsletterFrequency: req.NewsletterFrequency,
		MarketingEmails:     req.MarketingEmails,
		CaptchaResponse:     req.CaptchaResponse,
		InviteCode:          req.InviteCode,
		UtmSource:           req.UtmSource,
		UtmMedium:           req.UtmMedium,
		UtmCampaign:         req.UtmCampaign,
		ReferrerUrl:         req.ReferrerUrl,
	}
}

// searchusersGinRequest provides gin binding tags for SearchUsersRequest
type searchusersGinRequest struct {
	Query        string   `json:"query" form:"q" binding:"required,min=2,max=100"`
	SearchFields []string `json:"search_fields" form:"search_fields"`
	Limit        int32    `json:"limit" form:"limit" binding:"min=1,max=50"`
	ClientId     string   `json:"client_id" header:"X-Client-ID" binding:"required"`
	RequestId    string   `json:"request_id" header:"X-Request-ID"`
	UserAgent    string   `json:"user_agent" header:"User-Agent"`
	ApiKey       string   `json:"api_key" header:"X-API-Key" binding:"required,min=32,max=64"`
	Latitude     float64  `json:"latitude" form:"lat" binding:"min=-90,max=90"`
	Longitude    float64  `json:"longitude" form:"lng" binding:"min=-180,max=180"`
	RadiusKm     int32    `json:"radius_km" form:"radius" binding:"min=1,max=1000"`
	MinAge       int32    `json:"min_age" form:"min_age" binding:"min=0,max=150"`
	MaxAge       int32    `json:"max_age" form:"max_age" binding:"min=0,max=150"`
	Country      string   `json:"country" form:"country"`
	City         string   `json:"city" form:"city"`
}

// convertSearchUsersGinRequest converts from gin request struct to protobuf struct
func (r *searchusersGinRequest) toSearchUsersRequest() *SearchUsersRequest {
	return &SearchUsersRequest{
		Query:        r.Query,
		SearchFields: r.SearchFields,
		Limit:        r.Limit,
		ClientId:     r.ClientId,
		RequestId:    r.RequestId,
		UserAgent:    r.UserAgent,
		ApiKey:       r.ApiKey,
		Latitude:     r.Latitude,
		Longitude:    r.Longitude,
		RadiusKm:     r.RadiusKm,
		MinAge:       r.MinAge,
		MaxAge:       r.MaxAge,
		Country:      r.Country,
		City:         r.City,
	}
}

// fromSearchUsersRequest converts from protobuf struct to gin request struct
func fromSearchUsersRequest(req *SearchUsersRequest) *searchusersGinRequest {
	return &searchusersGinRequest{
		Query:        req.Query,
		SearchFields: req.SearchFields,
		Limit:        req.Limit,
		ClientId:     req.ClientId,
		RequestId:    req.RequestId,
		UserAgent:    req.UserAgent,
		ApiKey:       req.ApiKey,
		Latitude:     req.Latitude,
		Longitude:    req.Longitude,
		RadiusKm:     req.RadiusKm,
		MinAge:       req.MinAge,
		MaxAge:       req.MaxAge,
		Country:      req.Country,
		City:         req.City,
	}
}

// updateprofileGinRequest provides gin binding tags for UpdateProfileRequest
type updateprofileGinRequest struct {
	UserId  string       `json:"user_id" uri:"user_id" binding:"required,uuid"`
	Profile *UserProfile `json:"profile"`
}

// convertUpdateProfileGinRequest converts from gin request struct to protobuf struct
func (r *updateprofileGinRequest) toUpdateProfileRequest() *UpdateProfileRequest {
	return &UpdateProfileRequest{
		UserId:  r.UserId,
		Profile: r.Profile,
	}
}

// fromUpdateProfileRequest converts from protobuf struct to gin request struct
func fromUpdateProfileRequest(req *UpdateProfileRequest) *updateprofileGinRequest {
	return &updateprofileGinRequest{
		UserId:  req.UserId,
		Profile: req.Profile,
	}
}

// updateuserGinRequest provides gin binding tags for UpdateUserRequest
type updateuserGinRequest struct {
	UserId           string            `json:"user_id" uri:"user_id" binding:"required,uuid"`
	SendNotification bool              `json:"send_notification" form:"send_notification"`
	UpdateReason     string            `json:"update_reason" form:"reason"`
	IfMatch          string            `json:"if_match" header:"If-Match"`
	Authorization    string            `json:"authorization" header:"Authorization" binding:"required"`
	Username         string            `json:"username" binding:"required,min=3,max=50"`
	Email            string            `json:"email" binding:"required,email"`
	FullName         string            `json:"full_name" binding:"required,min=2,max=100"`
	Phone            string            `json:"phone" binding:"len=11,numeric"`
	Age              int32             `json:"age" binding:"min=13,max=120"`
	Bio              string            `json:"bio" binding:"max=1000"`
	Status           string            `json:"status" binding:"required,oneof=active inactive suspended banned"`
	Roles            []string          `json:"roles" binding:"min=1"`
	Address          *Address          `json:"address"`
	SocialLinks      map[string]string `json:"social_links"`
	Settings         *UserSettings     `json:"settings"`
	UpdatedAt        string            `json:"updated_at" binding:"required,datetime=2006-01-02T15:04:05Z07:00"`
	Version          int32             `json:"version" binding:"required,min=1"`
}

// convertUpdateUserGinRequest converts from gin request struct to protobuf struct
func (r *updateuserGinRequest) toUpdateUserRequest() *UpdateUserRequest {
	return &UpdateUserRequest{
		UserId:           r.UserId,
		SendNotification: r.SendNotification,
		UpdateReason:     r.UpdateReason,
		IfMatch:          r.IfMatch,
		Authorization:    r.Authorization,
		Username:         r.Username,
		Email:            r.Email,
		FullName:         r.FullName,
		Phone:            r.Phone,
		Age:              r.Age,
		Bio:              r.Bio,
		Status:           r.Status,
		Roles:            r.Roles,
		Address:          r.Address,
		SocialLinks:      r.SocialLinks,
		Settings:         r.Settings,
		UpdatedAt:        r.UpdatedAt,
		Version:          r.Version,
	}
}

// fromUpdateUserRequest converts from protobuf struct to gin request struct
func fromUpdateUserRequest(req *UpdateUserRequest) *updateuserGinRequest {
	return &updateuserGinRequest{
		UserId:           req.UserId,
		SendNotification: req.SendNotification,
		UpdateReason:     req.UpdateReason,
		IfMatch:          req.IfMatch,
		Authorization:    req.Authorization,
		Username:         req.Username,
		Email:            req.Email,
		FullName:         req.FullName,
		Phone:            req.Phone,
		Age:              req.Age,
		Bio:              req.Bio,
		Status:           req.Status,
		Roles:            req.Roles,
		Address:          req.Address,
		SocialLinks:      req.SocialLinks,
		Settings:         req.Settings,
		UpdatedAt:        req.UpdatedAt,
		Version:          req.Version,
	}
}
