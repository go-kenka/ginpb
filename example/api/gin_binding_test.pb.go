// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.12.4
// source: api/gin_binding_test.proto

package api

import (
	_ "github.com/go-kenka/ginpb/tag"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 所有绑定类型的综合测试
type AllBindingsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path参数测试
	PathParam string `protobuf:"bytes,1,opt,name=path_param,json=pathParam,proto3" json:"path_param,omitempty"`
	// Query参数测试
	QueryParam string `protobuf:"bytes,2,opt,name=query_param,json=queryParam,proto3" json:"query_param,omitempty"`
	Page       int32  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int32  `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Header测试
	UserAgent     string `protobuf:"bytes,5,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	Authorization string `protobuf:"bytes,6,opt,name=authorization,proto3" json:"authorization,omitempty"`
	ContentType   string `protobuf:"bytes,7,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	// JSON Body测试
	Title       string  `protobuf:"bytes,8,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Price       float64 `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	IsActive    bool    `protobuf:"varint,11,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// 复杂类型测试
	Tags     []string          `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	Metadata map[string]string `protobuf:"bytes,13,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 自定义验证
	Email         string `protobuf:"bytes,14,opt,name=email,proto3" json:"email,omitempty"`
	Phone         string `protobuf:"bytes,15,opt,name=phone,proto3" json:"phone,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllBindingsRequest) Reset() {
	*x = AllBindingsRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllBindingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllBindingsRequest) ProtoMessage() {}

func (x *AllBindingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllBindingsRequest.ProtoReflect.Descriptor instead.
func (*AllBindingsRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{0}
}

func (x *AllBindingsRequest) GetPathParam() string {
	if x != nil {
		return x.PathParam
	}
	return ""
}

func (x *AllBindingsRequest) GetQueryParam() string {
	if x != nil {
		return x.QueryParam
	}
	return ""
}

func (x *AllBindingsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *AllBindingsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *AllBindingsRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *AllBindingsRequest) GetAuthorization() string {
	if x != nil {
		return x.Authorization
	}
	return ""
}

func (x *AllBindingsRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *AllBindingsRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AllBindingsRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AllBindingsRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AllBindingsRequest) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *AllBindingsRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *AllBindingsRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AllBindingsRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *AllBindingsRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type AllBindingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ReceivedData  map[string]string      `protobuf:"bytes,3,rep,name=received_data,json=receivedData,proto3" json:"received_data,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllBindingsResponse) Reset() {
	*x = AllBindingsResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllBindingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllBindingsResponse) ProtoMessage() {}

func (x *AllBindingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllBindingsResponse.ProtoReflect.Descriptor instead.
func (*AllBindingsResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{1}
}

func (x *AllBindingsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AllBindingsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *AllBindingsResponse) GetReceivedData() map[string]string {
	if x != nil {
		return x.ReceivedData
	}
	return nil
}

// Query绑定专项测试
type QueryBindingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Search         string                 `protobuf:"bytes,1,opt,name=search,proto3" json:"search,omitempty"`
	Page           int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize       int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Categories     []string               `protobuf:"bytes,4,rep,name=categories,proto3" json:"categories,omitempty"`
	IncludeDeleted bool                   `protobuf:"varint,5,opt,name=include_deleted,json=includeDeleted,proto3" json:"include_deleted,omitempty"`
	MinPrice       float64                `protobuf:"fixed64,6,opt,name=min_price,json=minPrice,proto3" json:"min_price,omitempty"`
	MaxPrice       float64                `protobuf:"fixed64,7,opt,name=max_price,json=maxPrice,proto3" json:"max_price,omitempty"`
	// 日期时间测试
	StartDate     string `protobuf:"bytes,8,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string `protobuf:"bytes,9,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryBindingRequest) Reset() {
	*x = QueryBindingRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBindingRequest) ProtoMessage() {}

func (x *QueryBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBindingRequest.ProtoReflect.Descriptor instead.
func (*QueryBindingRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{2}
}

func (x *QueryBindingRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

func (x *QueryBindingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryBindingRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryBindingRequest) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *QueryBindingRequest) GetIncludeDeleted() bool {
	if x != nil {
		return x.IncludeDeleted
	}
	return false
}

func (x *QueryBindingRequest) GetMinPrice() float64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *QueryBindingRequest) GetMaxPrice() float64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *QueryBindingRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *QueryBindingRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type QueryBindingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalCount    int32                  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Results       []string               `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryBindingResponse) Reset() {
	*x = QueryBindingResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryBindingResponse) ProtoMessage() {}

func (x *QueryBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryBindingResponse.ProtoReflect.Descriptor instead.
func (*QueryBindingResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{3}
}

func (x *QueryBindingResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *QueryBindingResponse) GetResults() []string {
	if x != nil {
		return x.Results
	}
	return nil
}

// Path参数绑定专项测试
type PathBindingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathBindingRequest) Reset() {
	*x = PathBindingRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathBindingRequest) ProtoMessage() {}

func (x *PathBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathBindingRequest.ProtoReflect.Descriptor instead.
func (*PathBindingRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{4}
}

func (x *PathBindingRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PathBindingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PathBindingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	FullPath      string                 `protobuf:"bytes,3,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathBindingResponse) Reset() {
	*x = PathBindingResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathBindingResponse) ProtoMessage() {}

func (x *PathBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathBindingResponse.ProtoReflect.Descriptor instead.
func (*PathBindingResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{5}
}

func (x *PathBindingResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PathBindingResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PathBindingResponse) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

// Header绑定专项测试
type HeaderBindingRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Accept         string                 `protobuf:"bytes,1,opt,name=accept,proto3" json:"accept,omitempty"`
	AcceptLanguage string                 `protobuf:"bytes,2,opt,name=accept_language,json=acceptLanguage,proto3" json:"accept_language,omitempty"`
	UserAgent      string                 `protobuf:"bytes,3,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	XApiKey        string                 `protobuf:"bytes,4,opt,name=x_api_key,json=xApiKey,proto3" json:"x_api_key,omitempty"`
	XRequestId     string                 `protobuf:"bytes,5,opt,name=x_request_id,json=xRequestId,proto3" json:"x_request_id,omitempty"`
	XRateLimit     int32                  `protobuf:"varint,6,opt,name=x_rate_limit,json=xRateLimit,proto3" json:"x_rate_limit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *HeaderBindingRequest) Reset() {
	*x = HeaderBindingRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderBindingRequest) ProtoMessage() {}

func (x *HeaderBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderBindingRequest.ProtoReflect.Descriptor instead.
func (*HeaderBindingRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{6}
}

func (x *HeaderBindingRequest) GetAccept() string {
	if x != nil {
		return x.Accept
	}
	return ""
}

func (x *HeaderBindingRequest) GetAcceptLanguage() string {
	if x != nil {
		return x.AcceptLanguage
	}
	return ""
}

func (x *HeaderBindingRequest) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *HeaderBindingRequest) GetXApiKey() string {
	if x != nil {
		return x.XApiKey
	}
	return ""
}

func (x *HeaderBindingRequest) GetXRequestId() string {
	if x != nil {
		return x.XRequestId
	}
	return ""
}

func (x *HeaderBindingRequest) GetXRateLimit() int32 {
	if x != nil {
		return x.XRateLimit
	}
	return 0
}

type HeaderBindingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Headers       map[string]string      `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RequestInfo   string                 `protobuf:"bytes,2,opt,name=request_info,json=requestInfo,proto3" json:"request_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HeaderBindingResponse) Reset() {
	*x = HeaderBindingResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeaderBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderBindingResponse) ProtoMessage() {}

func (x *HeaderBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderBindingResponse.ProtoReflect.Descriptor instead.
func (*HeaderBindingResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{7}
}

func (x *HeaderBindingResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HeaderBindingResponse) GetRequestInfo() string {
	if x != nil {
		return x.RequestInfo
	}
	return ""
}

// JSON绑定专项测试
type JSONBindingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 基础类型
	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age       int32   `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	Salary    float64 `protobuf:"fixed64,3,opt,name=salary,proto3" json:"salary,omitempty"`
	IsMarried bool    `protobuf:"varint,4,opt,name=is_married,json=isMarried,proto3" json:"is_married,omitempty"`
	// 数组和对象
	Hobbies []string          `protobuf:"bytes,5,rep,name=hobbies,proto3" json:"hobbies,omitempty"`
	Address map[string]string `protobuf:"bytes,6,rep,name=address,proto3" json:"address,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 验证规则测试
	Email   string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	Website string `protobuf:"bytes,8,opt,name=website,proto3" json:"website,omitempty"`
	Mobile  string `protobuf:"bytes,9,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// 自定义tag测试
	CustomField   string `protobuf:"bytes,10,opt,name=custom_field,json=customField,proto3" json:"custom_field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *JSONBindingRequest) Reset() {
	*x = JSONBindingRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONBindingRequest) ProtoMessage() {}

func (x *JSONBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONBindingRequest.ProtoReflect.Descriptor instead.
func (*JSONBindingRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{8}
}

func (x *JSONBindingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JSONBindingRequest) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *JSONBindingRequest) GetSalary() float64 {
	if x != nil {
		return x.Salary
	}
	return 0
}

func (x *JSONBindingRequest) GetIsMarried() bool {
	if x != nil {
		return x.IsMarried
	}
	return false
}

func (x *JSONBindingRequest) GetHobbies() []string {
	if x != nil {
		return x.Hobbies
	}
	return nil
}

func (x *JSONBindingRequest) GetAddress() map[string]string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *JSONBindingRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *JSONBindingRequest) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *JSONBindingRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *JSONBindingRequest) GetCustomField() string {
	if x != nil {
		return x.CustomField
	}
	return ""
}

type JSONBindingResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ProcessedData   string                 `protobuf:"bytes,1,opt,name=processed_data,json=processedData,proto3" json:"processed_data,omitempty"`
	ValidationScore int32                  `protobuf:"varint,2,opt,name=validation_score,json=validationScore,proto3" json:"validation_score,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *JSONBindingResponse) Reset() {
	*x = JSONBindingResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *JSONBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JSONBindingResponse) ProtoMessage() {}

func (x *JSONBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JSONBindingResponse.ProtoReflect.Descriptor instead.
func (*JSONBindingResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{9}
}

func (x *JSONBindingResponse) GetProcessedData() string {
	if x != nil {
		return x.ProcessedData
	}
	return ""
}

func (x *JSONBindingResponse) GetValidationScore() int32 {
	if x != nil {
		return x.ValidationScore
	}
	return 0
}

// Form绑定专项测试
type FormBindingRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Username        string                 `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password        string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	ConfirmPassword string                 `protobuf:"bytes,3,opt,name=confirm_password,json=confirmPassword,proto3" json:"confirm_password,omitempty"`
	// 文件上传相关
	FileName string `protobuf:"bytes,4,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	FileSize int64  `protobuf:"varint,5,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	// 多选框
	Interests []string `protobuf:"bytes,6,rep,name=interests,proto3" json:"interests,omitempty"`
	// 单选框
	Gender string `protobuf:"bytes,7,opt,name=gender,proto3" json:"gender,omitempty"`
	// 数字类型
	ExperienceYears int32 `protobuf:"varint,8,opt,name=experience_years,json=experienceYears,proto3" json:"experience_years,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FormBindingRequest) Reset() {
	*x = FormBindingRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormBindingRequest) ProtoMessage() {}

func (x *FormBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormBindingRequest.ProtoReflect.Descriptor instead.
func (*FormBindingRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{10}
}

func (x *FormBindingRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FormBindingRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *FormBindingRequest) GetConfirmPassword() string {
	if x != nil {
		return x.ConfirmPassword
	}
	return ""
}

func (x *FormBindingRequest) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *FormBindingRequest) GetFileSize() int64 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *FormBindingRequest) GetInterests() []string {
	if x != nil {
		return x.Interests
	}
	return nil
}

func (x *FormBindingRequest) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *FormBindingRequest) GetExperienceYears() int32 {
	if x != nil {
		return x.ExperienceYears
	}
	return 0
}

type FormBindingResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	RegistrationSuccess bool                   `protobuf:"varint,1,opt,name=registration_success,json=registrationSuccess,proto3" json:"registration_success,omitempty"`
	UserId              string                 `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Warnings            []string               `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *FormBindingResponse) Reset() {
	*x = FormBindingResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FormBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormBindingResponse) ProtoMessage() {}

func (x *FormBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormBindingResponse.ProtoReflect.Descriptor instead.
func (*FormBindingResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{11}
}

func (x *FormBindingResponse) GetRegistrationSuccess() bool {
	if x != nil {
		return x.RegistrationSuccess
	}
	return false
}

func (x *FormBindingResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *FormBindingResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// 混合绑定测试（最复杂场景）
type MixedBindingRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// URI参数
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	ActionType string `protobuf:"bytes,2,opt,name=action_type,json=actionType,proto3" json:"action_type,omitempty"`
	// Query参数
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Force   bool   `protobuf:"varint,4,opt,name=force,proto3" json:"force,omitempty"`
	// Header参数
	Authorization string `protobuf:"bytes,5,opt,name=authorization,proto3" json:"authorization,omitempty"`
	ContentType   string `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	IfMatch       string `protobuf:"bytes,7,opt,name=if_match,json=ifMatch,proto3" json:"if_match,omitempty"`
	// JSON Body
	OperationName     string            `protobuf:"bytes,8,opt,name=operation_name,json=operationName,proto3" json:"operation_name,omitempty"`
	Parameters        map[string]string `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AffectedResources []string          `protobuf:"bytes,10,rep,name=affected_resources,json=affectedResources,proto3" json:"affected_resources,omitempty"`
	// 时间戳
	Timestamp string `protobuf:"bytes,11,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 自定义验证
	Checksum      string `protobuf:"bytes,12,opt,name=checksum,proto3" json:"checksum,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MixedBindingRequest) Reset() {
	*x = MixedBindingRequest{}
	mi := &file_api_gin_binding_test_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixedBindingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedBindingRequest) ProtoMessage() {}

func (x *MixedBindingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedBindingRequest.ProtoReflect.Descriptor instead.
func (*MixedBindingRequest) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{12}
}

func (x *MixedBindingRequest) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *MixedBindingRequest) GetActionType() string {
	if x != nil {
		return x.ActionType
	}
	return ""
}

func (x *MixedBindingRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *MixedBindingRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

func (x *MixedBindingRequest) GetAuthorization() string {
	if x != nil {
		return x.Authorization
	}
	return ""
}

func (x *MixedBindingRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *MixedBindingRequest) GetIfMatch() string {
	if x != nil {
		return x.IfMatch
	}
	return ""
}

func (x *MixedBindingRequest) GetOperationName() string {
	if x != nil {
		return x.OperationName
	}
	return ""
}

func (x *MixedBindingRequest) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *MixedBindingRequest) GetAffectedResources() []string {
	if x != nil {
		return x.AffectedResources
	}
	return nil
}

func (x *MixedBindingRequest) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *MixedBindingRequest) GetChecksum() string {
	if x != nil {
		return x.Checksum
	}
	return ""
}

type MixedBindingResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	OperationId      string                 `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	Status           string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Result           map[string]string      `protobuf:"bytes,3,rep,name=result,proto3" json:"result,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ValidationErrors []string               `protobuf:"bytes,4,rep,name=validation_errors,json=validationErrors,proto3" json:"validation_errors,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *MixedBindingResponse) Reset() {
	*x = MixedBindingResponse{}
	mi := &file_api_gin_binding_test_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MixedBindingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedBindingResponse) ProtoMessage() {}

func (x *MixedBindingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_gin_binding_test_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedBindingResponse.ProtoReflect.Descriptor instead.
func (*MixedBindingResponse) Descriptor() ([]byte, []int) {
	return file_api_gin_binding_test_proto_rawDescGZIP(), []int{13}
}

func (x *MixedBindingResponse) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *MixedBindingResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MixedBindingResponse) GetResult() map[string]string {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *MixedBindingResponse) GetValidationErrors() []string {
	if x != nil {
		return x.ValidationErrors
	}
	return nil
}

var File_api_gin_binding_test_proto protoreflect.FileDescriptor

var file_api_gin_binding_test_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x69, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x06, 0x0a, 0x12, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e,
	0x9a, 0xb5, 0x18, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x26, 0x0a, 0x0b, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05,
	0x92, 0xb5, 0x18, 0x01, 0x71, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x08, 0x92, 0xb5, 0x18, 0x04, 0x70, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x23,
	0x8a, 0xb5, 0x18, 0x1f, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x2a, 0x16, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x2c, 0x6d, 0x61, 0x78, 0x3d,
	0x31, 0x30, 0x30, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0x8a, 0xb5, 0x18, 0x0c, 0x22, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0x8a, 0xb5, 0x18, 0x19, 0x22, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x35, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0x8a, 0xb5, 0x18, 0x0e, 0x22, 0x0c, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0x8a, 0xb5, 0x18, 0x1f, 0x1a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x2a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69,
	0x6e, 0x3d, 0x32, 0x2c, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x8a, 0xb5, 0x18, 0x0d, 0x1a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1b, 0x8a, 0xb5, 0x18, 0x17, 0x1a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x2a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69,
	0x6e, 0x3d, 0x30, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x69, 0x73,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0f, 0x8a,
	0xb5, 0x18, 0x0b, 0x1a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0a, 0x8a, 0xb5, 0x18, 0x06, 0x1a, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x55, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0e, 0x8a, 0xb5, 0x18, 0x0a, 0x1a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x31, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b,
	0x8a, 0xb5, 0x18, 0x17, 0x1a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2a, 0x0e, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x8a, 0xb5, 0x18, 0x18, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2a, 0x0f,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6c, 0x65, 0x6e, 0x3d, 0x31, 0x31, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xdf, 0x01, 0x0a, 0x13, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x53, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe7, 0x03, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0x92,
	0xb5, 0x18, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x11, 0x8a, 0xb5, 0x18, 0x0d, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x2a, 0x05, 0x6d, 0x69, 0x6e,
	0x3d, 0x31, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x1e, 0x8a, 0xb5, 0x18,
	0x1a, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x2a, 0x0d, 0x6d, 0x69,
	0x6e, 0x3d, 0x31, 0x2c, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0x92, 0xb5, 0x18, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x13, 0x92, 0xb5,
	0x18, 0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x2a, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x42, 0x0d, 0x92, 0xb5, 0x18, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a,
	0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x0d, 0x92, 0xb5, 0x18, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x52,
	0x08, 0x6d, 0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x8a,
	0xb5, 0x18, 0x21, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x2a,
	0x13, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3d, 0x32, 0x30, 0x30, 0x36, 0x2d, 0x30,
	0x31, 0x2d, 0x30, 0x32, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0x8a, 0xb5, 0x18, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x2a, 0x13, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3d, 0x32, 0x30, 0x30, 0x36,
	0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22,
	0x51, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x18, 0x8a, 0xb5, 0x18, 0x14, 0x12, 0x02, 0x69, 0x64, 0x2a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x21, 0x8a, 0xb5, 0x18, 0x1d, 0x12, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x15, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x32, 0x2c, 0x6d, 0x61, 0x78,
	0x3d, 0x35, 0x30, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x56, 0x0a, 0x13, 0x50, 0x61, 0x74,
	0x68, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74,
	0x68, 0x22, 0xf1, 0x02, 0x0a, 0x14, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0x8a, 0xb5, 0x18, 0x08,
	0x22, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x52, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x12, 0x3e, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x8a, 0xb5, 0x18, 0x11, 0x22,
	0x0f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x2d, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x8a, 0xb5, 0x18, 0x16, 0x22, 0x0a, 0x55, 0x73, 0x65, 0x72,
	0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x78,
	0x5f, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20,
	0x8a, 0xb5, 0x18, 0x1c, 0x22, 0x09, 0x58, 0x2d, 0x41, 0x50, 0x49, 0x2d, 0x4b, 0x65, 0x79, 0x2a,
	0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x30,
	0x52, 0x07, 0x78, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x78, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x8a, 0xb5, 0x18, 0x0e, 0x22, 0x0c, 0x58, 0x2d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2d, 0x49, 0x44, 0x52, 0x0a, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x44, 0x0a, 0x0c, 0x78, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x8a, 0xb5, 0x18, 0x1e, 0x22, 0x0c, 0x58, 0x2d, 0x52,
	0x61, 0x74, 0x65, 0x2d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x2a, 0x0e, 0x6d, 0x69, 0x6e, 0x3d, 0x31,
	0x2c, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x30, 0x52, 0x0a, 0x78, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x04, 0x0a, 0x12, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0x8a, 0xb5, 0x18, 0x1e,
	0x1a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x32, 0x2c, 0x6d, 0x61, 0x78, 0x3d, 0x31, 0x30, 0x30, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x21, 0x8a, 0xb5, 0x18, 0x1d, 0x1a, 0x03, 0x61, 0x67, 0x65, 0x2a, 0x16, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x30, 0x2c, 0x6d, 0x61, 0x78,
	0x3d, 0x31, 0x35, 0x30, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x61, 0x6c,
	0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42, 0x13, 0x8a, 0xb5, 0x18, 0x0f, 0x1a,
	0x06, 0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x2a, 0x05, 0x6d, 0x69, 0x6e, 0x3d, 0x30, 0x52, 0x06,
	0x73, 0x61, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72,
	0x72, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x10, 0x8a, 0xb5, 0x18, 0x0c,
	0x1a, 0x0a, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x52, 0x09, 0x69, 0x73,
	0x4d, 0x61, 0x72, 0x72, 0x69, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x68, 0x6f, 0x62, 0x62, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x14, 0x8a, 0xb5, 0x18, 0x10, 0x1a, 0x07,
	0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x2a, 0x05, 0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x52, 0x07,
	0x68, 0x6f, 0x62, 0x62, 0x69, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x0d, 0x8a, 0xb5, 0x18, 0x09, 0x1a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x8a, 0xb5, 0x18, 0x17, 0x1a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x2a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12,
	0x8a, 0xb5, 0x18, 0x0e, 0x1a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x2a, 0x03, 0x75,
	0x72, 0x6c, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0x8a, 0xb5, 0x18,
	0x19, 0x1a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x6c, 0x65, 0x6e, 0x3d, 0x31, 0x31, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69,
	0x6c, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0x8a, 0xb5, 0x18, 0x1d, 0x1a, 0x0c,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x0d, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x3a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x3a, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x67, 0x0a, 0x13, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x86, 0x04,
	0x0a, 0x12, 0x46, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x8a, 0xb5, 0x18, 0x21, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x33, 0x2c, 0x6d, 0x61, 0x78, 0x3d, 0x35, 0x30, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x8a, 0xb5, 0x18, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x6d, 0x69, 0x6e, 0x3d, 0x38, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x5c, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0x8a,
	0xb5, 0x18, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c,
	0x65, 0x71, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x2a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0xb5, 0x18, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0d, 0x92, 0xb5, 0x18, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0d, 0x92, 0xb5,
	0x18, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x52, 0x09, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x25, 0x8a, 0xb5, 0x18, 0x21, 0x0a, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x2a, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x6d, 0x61, 0x6c, 0x65,
	0x20, 0x66, 0x65, 0x6d, 0x61, 0x6c, 0x65, 0x20, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x24, 0x8a, 0xb5, 0x18, 0x20, 0x0a, 0x10, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x73, 0x2a, 0x0c, 0x6d, 0x69, 0x6e, 0x3d, 0x30, 0x2c, 0x6d,
	0x61, 0x78, 0x3d, 0x35, 0x30, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x59, 0x65, 0x61, 0x72, 0x73, 0x22, 0x7d, 0x0a, 0x13, 0x46, 0x6f, 0x72, 0x6d, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xa4, 0x07, 0x0a, 0x13, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x20, 0x8a, 0xb5, 0x18, 0x1c, 0x12, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x2a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c,
	0x75, 0x75, 0x69, 0x64, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x57, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36, 0x8a, 0xb5, 0x18, 0x32, 0x12, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x23, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x2c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x3d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0x8a, 0xb5, 0x18, 0x13,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x05,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x09, 0x92, 0xb5, 0x18,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a,
	0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x30, 0x8a, 0xb5, 0x18, 0x2c, 0x22, 0x0d, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x2c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x77, 0x69, 0x74, 0x68, 0x3d, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x20, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x8a, 0xb5, 0x18,
	0x18, 0x22, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x2a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x69, 0x66, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x8a, 0xb5, 0x18, 0x0a, 0x22, 0x08,
	0x49, 0x66, 0x2d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x69, 0x66, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x45, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x8a, 0xb5, 0x18, 0x1a, 0x1a,
	0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x52, 0x0d, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x10, 0x8a, 0xb5, 0x18, 0x0c,
	0x1a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4e, 0x0a, 0x12, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0x8a, 0xb5, 0x18, 0x1b, 0x1a, 0x12, 0x61, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2a, 0x05,
	0x6d, 0x69, 0x6e, 0x3d, 0x31, 0x52, 0x11, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3c, 0x8a, 0xb5, 0x18,
	0x38, 0x1a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2a, 0x2b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2c, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3d,
	0x32, 0x30, 0x30, 0x36, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x32, 0x54, 0x31, 0x35, 0x3a, 0x30, 0x34,
	0x3a, 0x30, 0x35, 0x5a, 0x30, 0x37, 0x3a, 0x30, 0x30, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x47, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x8a, 0xb5, 0x18, 0x27, 0x1a, 0x08, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x2a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2c, 0x6c, 0x65, 0x6e, 0x3d, 0x36, 0x34, 0x2c, 0x68, 0x65, 0x78, 0x61, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x1a, 0x3d, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfc, 0x01, 0x0a,
	0x14, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x1a, 0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa2, 0x06, 0x0a, 0x15,
	0x47, 0x69, 0x6e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x41, 0x6c, 0x6c, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x7b,
	0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x7d, 0x12, 0x64, 0x0a, 0x10, 0x54,
	0x65, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x6c, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50,
	0x61, 0x74, 0x68, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70,
	0x61, 0x74, 0x68, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0x68, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x63, 0x0a, 0x0f, 0x54, 0x65, 0x73,
	0x74, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x4a, 0x53, 0x4f, 0x4e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a,
	0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x63,
	0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1b, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x15, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x66,
	0x6f, 0x72, 0x6d, 0x12, 0x8a, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x69, 0x78, 0x65,
	0x64, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a,
	0x1a, 0x2e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x69, 0x78, 0x65, 0x64, 0x2f, 0x7b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x7b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d,
	0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67,
	0x6f, 0x2d, 0x6b, 0x65, 0x6e, 0x6b, 0x61, 0x2f, 0x67, 0x69, 0x6e, 0x70, 0x62, 0x2f, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_gin_binding_test_proto_rawDescOnce sync.Once
	file_api_gin_binding_test_proto_rawDescData = file_api_gin_binding_test_proto_rawDesc
)

func file_api_gin_binding_test_proto_rawDescGZIP() []byte {
	file_api_gin_binding_test_proto_rawDescOnce.Do(func() {
		file_api_gin_binding_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_gin_binding_test_proto_rawDescData)
	})
	return file_api_gin_binding_test_proto_rawDescData
}

var file_api_gin_binding_test_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_api_gin_binding_test_proto_goTypes = []any{
	(*AllBindingsRequest)(nil),    // 0: example.AllBindingsRequest
	(*AllBindingsResponse)(nil),   // 1: example.AllBindingsResponse
	(*QueryBindingRequest)(nil),   // 2: example.QueryBindingRequest
	(*QueryBindingResponse)(nil),  // 3: example.QueryBindingResponse
	(*PathBindingRequest)(nil),    // 4: example.PathBindingRequest
	(*PathBindingResponse)(nil),   // 5: example.PathBindingResponse
	(*HeaderBindingRequest)(nil),  // 6: example.HeaderBindingRequest
	(*HeaderBindingResponse)(nil), // 7: example.HeaderBindingResponse
	(*JSONBindingRequest)(nil),    // 8: example.JSONBindingRequest
	(*JSONBindingResponse)(nil),   // 9: example.JSONBindingResponse
	(*FormBindingRequest)(nil),    // 10: example.FormBindingRequest
	(*FormBindingResponse)(nil),   // 11: example.FormBindingResponse
	(*MixedBindingRequest)(nil),   // 12: example.MixedBindingRequest
	(*MixedBindingResponse)(nil),  // 13: example.MixedBindingResponse
	nil,                           // 14: example.AllBindingsRequest.MetadataEntry
	nil,                           // 15: example.AllBindingsResponse.ReceivedDataEntry
	nil,                           // 16: example.HeaderBindingResponse.HeadersEntry
	nil,                           // 17: example.JSONBindingRequest.AddressEntry
	nil,                           // 18: example.MixedBindingRequest.ParametersEntry
	nil,                           // 19: example.MixedBindingResponse.ResultEntry
}
var file_api_gin_binding_test_proto_depIdxs = []int32{
	14, // 0: example.AllBindingsRequest.metadata:type_name -> example.AllBindingsRequest.MetadataEntry
	15, // 1: example.AllBindingsResponse.received_data:type_name -> example.AllBindingsResponse.ReceivedDataEntry
	16, // 2: example.HeaderBindingResponse.headers:type_name -> example.HeaderBindingResponse.HeadersEntry
	17, // 3: example.JSONBindingRequest.address:type_name -> example.JSONBindingRequest.AddressEntry
	18, // 4: example.MixedBindingRequest.parameters:type_name -> example.MixedBindingRequest.ParametersEntry
	19, // 5: example.MixedBindingResponse.result:type_name -> example.MixedBindingResponse.ResultEntry
	0,  // 6: example.GinBindingTestService.TestAllBindings:input_type -> example.AllBindingsRequest
	2,  // 7: example.GinBindingTestService.TestQueryBinding:input_type -> example.QueryBindingRequest
	4,  // 8: example.GinBindingTestService.TestPathBinding:input_type -> example.PathBindingRequest
	6,  // 9: example.GinBindingTestService.TestHeaderBinding:input_type -> example.HeaderBindingRequest
	8,  // 10: example.GinBindingTestService.TestJSONBinding:input_type -> example.JSONBindingRequest
	10, // 11: example.GinBindingTestService.TestFormBinding:input_type -> example.FormBindingRequest
	12, // 12: example.GinBindingTestService.TestMixedBinding:input_type -> example.MixedBindingRequest
	1,  // 13: example.GinBindingTestService.TestAllBindings:output_type -> example.AllBindingsResponse
	3,  // 14: example.GinBindingTestService.TestQueryBinding:output_type -> example.QueryBindingResponse
	5,  // 15: example.GinBindingTestService.TestPathBinding:output_type -> example.PathBindingResponse
	7,  // 16: example.GinBindingTestService.TestHeaderBinding:output_type -> example.HeaderBindingResponse
	9,  // 17: example.GinBindingTestService.TestJSONBinding:output_type -> example.JSONBindingResponse
	11, // 18: example.GinBindingTestService.TestFormBinding:output_type -> example.FormBindingResponse
	13, // 19: example.GinBindingTestService.TestMixedBinding:output_type -> example.MixedBindingResponse
	13, // [13:20] is the sub-list for method output_type
	6,  // [6:13] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_api_gin_binding_test_proto_init() }
func file_api_gin_binding_test_proto_init() {
	if File_api_gin_binding_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_gin_binding_test_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_gin_binding_test_proto_goTypes,
		DependencyIndexes: file_api_gin_binding_test_proto_depIdxs,
		MessageInfos:      file_api_gin_binding_test_proto_msgTypes,
	}.Build()
	File_api_gin_binding_test_proto = out.File
	file_api_gin_binding_test_proto_rawDesc = nil
	file_api_gin_binding_test_proto_goTypes = nil
	file_api_gin_binding_test_proto_depIdxs = nil
}
