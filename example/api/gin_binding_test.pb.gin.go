// Code generated by protoc-gen-gin with resty client. DO NOT EDIT.
// versions:
// - protoc-gen-gin v1.0.0
// - protoc             v3.12.4
// source: api/gin_binding_test.proto

package api

import (
	context "context"
	fmt "fmt"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	binding1 "github.com/go-kenka/ginpb/binding"
	client "github.com/go-kenka/ginpb/client"
	metadata "github.com/go-kenka/ginpb/metadata"
	middleware "github.com/go-kenka/ginpb/middleware"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the resty client it is being compiled against.
var _ = new(context.Context)
var _ = new(metadata.GinData)
var _ = new(gin.H)
var _ = new(client.Client)
var _ = binding.JSON
var _ = binding1.BindByContentType
var _ = middleware.Chain
var _ = fmt.Sprintf
var _ = strings.ReplaceAll

const OperationGinBindingTestServiceTestAllBindings = "/example.GinBindingTestService/TestAllBindings"
const OperationGinBindingTestServiceTestFormBinding = "/example.GinBindingTestService/TestFormBinding"
const OperationGinBindingTestServiceTestHeaderBinding = "/example.GinBindingTestService/TestHeaderBinding"
const OperationGinBindingTestServiceTestJSONBinding = "/example.GinBindingTestService/TestJSONBinding"
const OperationGinBindingTestServiceTestMixedBinding = "/example.GinBindingTestService/TestMixedBinding"
const OperationGinBindingTestServiceTestPathBinding = "/example.GinBindingTestService/TestPathBinding"
const OperationGinBindingTestServiceTestQueryBinding = "/example.GinBindingTestService/TestQueryBinding"

type GinBindingTestServiceHTTPServer interface {
	TestAllBindings(context.Context, *AllBindingsRequest) (*AllBindingsResponse, error)
	TestFormBinding(context.Context, *FormBindingRequest) (*FormBindingResponse, error)
	TestHeaderBinding(context.Context, *HeaderBindingRequest) (*HeaderBindingResponse, error)
	TestJSONBinding(context.Context, *JSONBindingRequest) (*JSONBindingResponse, error)
	TestMixedBinding(context.Context, *MixedBindingRequest) (*MixedBindingResponse, error)
	TestPathBinding(context.Context, *PathBindingRequest) (*PathBindingResponse, error)
	TestQueryBinding(context.Context, *QueryBindingRequest) (*QueryBindingResponse, error)
}

func RegisterGinBindingTestServiceHTTPServer(r gin.IRouter, srv GinBindingTestServiceHTTPServer) {
	r.POST("/test/bindings/:path_param", _GinBindingTestService_TestAllBindings0_HTTP_Handler(srv))
	r.GET("/test/query", _GinBindingTestService_TestQueryBinding0_HTTP_Handler(srv))
	r.GET("/test/path/:id/:name", _GinBindingTestService_TestPathBinding0_HTTP_Handler(srv))
	r.GET("/test/header", _GinBindingTestService_TestHeaderBinding0_HTTP_Handler(srv))
	r.POST("/test/json", _GinBindingTestService_TestJSONBinding0_HTTP_Handler(srv))
	r.POST("/test/form", _GinBindingTestService_TestFormBinding0_HTTP_Handler(srv))
	r.PUT("/test/mixed/:resource_id/action/:action_type", _GinBindingTestService_TestMixedBinding0_HTTP_Handler(srv))
}

func RegisterGinBindingTestServiceHTTPServerWithMiddleware(r gin.IRouter, srv GinBindingTestServiceHTTPServer, middlewares ...gin.HandlerFunc) {
	r.POST("/test/bindings/:path_param", append(middlewares, _GinBindingTestService_TestAllBindings0_HTTP_Handler(srv))...)
	r.GET("/test/query", append(middlewares, _GinBindingTestService_TestQueryBinding0_HTTP_Handler(srv))...)
	r.GET("/test/path/:id/:name", append(middlewares, _GinBindingTestService_TestPathBinding0_HTTP_Handler(srv))...)
	r.GET("/test/header", append(middlewares, _GinBindingTestService_TestHeaderBinding0_HTTP_Handler(srv))...)
	r.POST("/test/json", append(middlewares, _GinBindingTestService_TestJSONBinding0_HTTP_Handler(srv))...)
	r.POST("/test/form", append(middlewares, _GinBindingTestService_TestFormBinding0_HTTP_Handler(srv))...)
	r.PUT("/test/mixed/:resource_id/action/:action_type", append(middlewares, _GinBindingTestService_TestMixedBinding0_HTTP_Handler(srv))...)
}

func RegisterGinBindingTestServiceHTTPServerWithOperationMiddleware(r gin.IRouter, srv GinBindingTestServiceHTTPServer, middlewares map[string][]gin.HandlerFunc) {
	if mws, exists := middlewares[OperationGinBindingTestServiceTestAllBindings]; exists {
		r.POST("/test/bindings/:path_param", append(mws, _GinBindingTestService_TestAllBindings0_HTTP_Handler(srv))...)
	} else {
		r.POST("/test/bindings/:path_param", _GinBindingTestService_TestAllBindings0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationGinBindingTestServiceTestQueryBinding]; exists {
		r.GET("/test/query", append(mws, _GinBindingTestService_TestQueryBinding0_HTTP_Handler(srv))...)
	} else {
		r.GET("/test/query", _GinBindingTestService_TestQueryBinding0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationGinBindingTestServiceTestPathBinding]; exists {
		r.GET("/test/path/:id/:name", append(mws, _GinBindingTestService_TestPathBinding0_HTTP_Handler(srv))...)
	} else {
		r.GET("/test/path/:id/:name", _GinBindingTestService_TestPathBinding0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationGinBindingTestServiceTestHeaderBinding]; exists {
		r.GET("/test/header", append(mws, _GinBindingTestService_TestHeaderBinding0_HTTP_Handler(srv))...)
	} else {
		r.GET("/test/header", _GinBindingTestService_TestHeaderBinding0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationGinBindingTestServiceTestJSONBinding]; exists {
		r.POST("/test/json", append(mws, _GinBindingTestService_TestJSONBinding0_HTTP_Handler(srv))...)
	} else {
		r.POST("/test/json", _GinBindingTestService_TestJSONBinding0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationGinBindingTestServiceTestFormBinding]; exists {
		r.POST("/test/form", append(mws, _GinBindingTestService_TestFormBinding0_HTTP_Handler(srv))...)
	} else {
		r.POST("/test/form", _GinBindingTestService_TestFormBinding0_HTTP_Handler(srv))
	}
	if mws, exists := middlewares[OperationGinBindingTestServiceTestMixedBinding]; exists {
		r.PUT("/test/mixed/:resource_id/action/:action_type", append(mws, _GinBindingTestService_TestMixedBinding0_HTTP_Handler(srv))...)
	} else {
		r.PUT("/test/mixed/:resource_id/action/:action_type", _GinBindingTestService_TestMixedBinding0_HTTP_Handler(srv))
	}
}

func _GinBindingTestService_TestAllBindings0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestAllBindings)

		var ginReq testallbindingsGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestAllBindingsRequest()

		// Custom field tags detected:

		// Field PathParam: json:"path_param" uri:"path_param"
		// Field QueryParam: form:"q" json:"query_param"
		// Field Page: form:"page" json:"page"
		// Field Limit: binding:"required,min=1,max=100" form:"limit" json:"limit"
		// Field UserAgent: header:"User-Agent" json:"user_agent"
		// Field Authorization: binding:"required" header:"Authorization" json:"authorization"
		// Field ContentType: header:"Content-Type" json:"content_type"
		// Field Title: binding:"required,min=2,max=100" json:"title"
		// Field Description: json:"description"
		// Field Price: binding:"required,min=0" json:"price"
		// Field IsActive: json:"is_active"
		// Field Tags: json:"tags"
		// Field Metadata: json:"metadata"
		// Field Email: binding:"required,email" json:"email"
		// Field Phone: binding:"required,len=11" form:"phone" json:"phone"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestAllBindings(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _GinBindingTestService_TestQueryBinding0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestQueryBinding)

		var ginReq testquerybindingGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestQueryBindingRequest()

		// Custom field tags detected:

		// Field Search: form:"search" json:"search"
		// Field Page: binding:"min=1" form:"page" json:"page"
		// Field PageSize: binding:"min=1,max=100" form:"page_size" json:"page_size"
		// Field Categories: form:"category" json:"categories"
		// Field IncludeDeleted: form:"include_deleted" json:"include_deleted"
		// Field MinPrice: form:"min_price" json:"min_price"
		// Field MaxPrice: form:"max_price" json:"max_price"
		// Field StartDate: binding:"datetime=2006-01-02" form:"start_date" json:"start_date"
		// Field EndDate: binding:"datetime=2006-01-02" form:"end_date" json:"end_date"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestQueryBinding(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _GinBindingTestService_TestPathBinding0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestPathBinding)

		var ginReq testpathbindingGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestPathBindingRequest()

		// Custom field tags detected:

		// Field Id: binding:"required,min=1" json:"id" uri:"id"
		// Field Name: binding:"required,min=2,max=50" json:"name" uri:"name"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestPathBinding(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _GinBindingTestService_TestHeaderBinding0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestHeaderBinding)

		var ginReq testheaderbindingGinRequest
		// query
		if err := ctx.BindQuery(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestHeaderBindingRequest()

		// Custom field tags detected:

		// Field Accept: header:"Accept" json:"accept"
		// Field AcceptLanguage: header:"Accept-Language" json:"accept_language"
		// Field UserAgent: binding:"required" header:"User-Agent" json:"user_agent"
		// Field XApiKey: binding:"required,min=10" header:"X-API-Key" json:"x_api_key"
		// Field XRequestId: header:"X-Request-ID" json:"x_request_id"
		// Field XRateLimit: binding:"min=1,max=1000" header:"X-Rate-Limit" json:"x_rate_limit"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestHeaderBinding(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _GinBindingTestService_TestJSONBinding0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestJSONBinding)

		var ginReq testjsonbindingGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestJSONBindingRequest()

		// Custom field tags detected:

		// Field Name: binding:"required,min=2,max=100" json:"name"
		// Field Age: binding:"required,min=0,max=150" json:"age"
		// Field Salary: binding:"min=0" json:"salary"
		// Field IsMarried: json:"is_married"
		// Field Hobbies: binding:"min=1" json:"hobbies"
		// Field Address: json:"address"
		// Field Email: binding:"required,email" json:"email"
		// Field Website: binding:"url" json:"website"
		// Field Mobile: binding:"required,len=11" json:"mobile"
		// Field CustomField: json:"custom_field" xml:"special:value"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestJSONBinding(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _GinBindingTestService_TestFormBinding0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestFormBinding)

		var ginReq testformbindingGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestFormBindingRequest()

		// Custom field tags detected:

		// Field Username: binding:"required,min=3,max=50" form:"username" json:"username"
		// Field Password: binding:"required,min=8" form:"password" json:"password"
		// Field ConfirmPassword: binding:"required,eqfield=Password" form:"confirm_password" json:"confirm_password"
		// Field FileName: form:"file_name" json:"file_name"
		// Field FileSize: form:"file_size" json:"file_size"
		// Field Interests: form:"interests" json:"interests"
		// Field Gender: binding:"oneof=male female other" form:"gender" json:"gender"
		// Field ExperienceYears: binding:"min=0,max=50" form:"experience_years" json:"experience_years"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestFormBinding(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

func _GinBindingTestService_TestMixedBinding0_HTTP_Handler(srv GinBindingTestServiceHTTPServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		// Set operation for middleware
		ctx.Set("operation", OperationGinBindingTestServiceTestMixedBinding)

		var ginReq testmixedbindingGinRequest
		// body binding with automatic Content-Type detection
		if err := binding1.BindByContentType(ctx, &ginReq); err != nil {

			ctx.Error(err)
			return
		}
		// params
		if err := ctx.BindUri(&ginReq); err != nil {

			ctx.Error(err)
			return
		}

		// Convert gin request to protobuf request
		in := ginReq.toTestMixedBindingRequest()

		// Custom field tags detected:

		// Field ResourceId: binding:"required,uuid" json:"resource_id" uri:"resource_id"
		// Field ActionType: binding:"required,oneof=create update delete" json:"action_type" uri:"action_type"
		// Field Version: binding:"required" form:"version" json:"version"
		// Field Force: form:"force" json:"force"
		// Field Authorization: binding:"required,startswith=Bearer " header:"Authorization" json:"authorization"
		// Field ContentType: binding:"required" header:"Content-Type" json:"content_type"
		// Field IfMatch: header:"If-Match" json:"if_match"
		// Field OperationName: binding:"required" json:"operation_name"
		// Field Parameters: json:"parameters"
		// Field AffectedResources: binding:"min=1" json:"affected_resources"
		// Field Timestamp: binding:"required,datetime=2006-01-02T15:04:05Z07:00" json:"timestamp"
		// Field Checksum: binding:"required,len=64,hexadecimal" json:"checksum"
		// header,ip等常用信息, form表单信息,包括上传文件
		newCtx := metadata.NewContext(ctx)
		reply, err := srv.TestMixedBinding(newCtx, in)
		if err != nil {
			ctx.Error(err)
			return
		}
		ctx.JSON(200, reply)
	}
}

type GinBindingTestServiceHTTPClient interface {
	TestAllBindings(ctx context.Context, req *AllBindingsRequest, opts ...client.CallOption) (rsp *AllBindingsResponse, err error)
	TestFormBinding(ctx context.Context, req *FormBindingRequest, opts ...client.CallOption) (rsp *FormBindingResponse, err error)
	TestHeaderBinding(ctx context.Context, req *HeaderBindingRequest, opts ...client.CallOption) (rsp *HeaderBindingResponse, err error)
	TestJSONBinding(ctx context.Context, req *JSONBindingRequest, opts ...client.CallOption) (rsp *JSONBindingResponse, err error)
	TestMixedBinding(ctx context.Context, req *MixedBindingRequest, opts ...client.CallOption) (rsp *MixedBindingResponse, err error)
	TestPathBinding(ctx context.Context, req *PathBindingRequest, opts ...client.CallOption) (rsp *PathBindingResponse, err error)
	TestQueryBinding(ctx context.Context, req *QueryBindingRequest, opts ...client.CallOption) (rsp *QueryBindingResponse, err error)
}

type GinBindingTestServiceHTTPClientImpl struct {
	client client.Client
}

func NewGinBindingTestServiceHTTPClient(opts ...client.ClientOption) GinBindingTestServiceHTTPClient {
	c := client.NewClient(opts...)
	return &GinBindingTestServiceHTTPClientImpl{client: c}
}

func (c *GinBindingTestServiceHTTPClientImpl) TestAllBindings(ctx context.Context, in *AllBindingsRequest, opts ...client.CallOption) (*AllBindingsResponse, error) {
	var out AllBindingsResponse

	// 构建请求路径
	path := "/test/bindings/{path_param}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{path_param}", fmt.Sprintf("%v", in.PathParam))
	// POST请求
	err := c.client.Invoke(ctx, "POST", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("POST /test/bindings/{path_param} failed: %w", err)
	}
	return &out, nil
}

func (c *GinBindingTestServiceHTTPClientImpl) TestFormBinding(ctx context.Context, in *FormBindingRequest, opts ...client.CallOption) (*FormBindingResponse, error) {
	var out FormBindingResponse

	// 构建请求路径
	path := "/test/form"
	// POST请求
	err := c.client.Invoke(ctx, "POST", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("POST /test/form failed: %w", err)
	}
	return &out, nil
}

func (c *GinBindingTestServiceHTTPClientImpl) TestHeaderBinding(ctx context.Context, in *HeaderBindingRequest, opts ...client.CallOption) (*HeaderBindingResponse, error) {
	var out HeaderBindingResponse

	// 构建请求路径
	path := "/test/header"
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /test/header failed: %w", err)
	}
	return &out, nil
}

func (c *GinBindingTestServiceHTTPClientImpl) TestJSONBinding(ctx context.Context, in *JSONBindingRequest, opts ...client.CallOption) (*JSONBindingResponse, error) {
	var out JSONBindingResponse

	// 构建请求路径
	path := "/test/json"
	// POST请求
	err := c.client.Invoke(ctx, "POST", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("POST /test/json failed: %w", err)
	}
	return &out, nil
}

func (c *GinBindingTestServiceHTTPClientImpl) TestMixedBinding(ctx context.Context, in *MixedBindingRequest, opts ...client.CallOption) (*MixedBindingResponse, error) {
	var out MixedBindingResponse

	// 构建请求路径
	path := "/test/mixed/{resource_id}/action/{action_type}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{resource_id}", fmt.Sprintf("%v", in.ResourceId))
	path = strings.ReplaceAll(path, "{action_type}", fmt.Sprintf("%v", in.ActionType))
	// PUT请求
	err := c.client.Invoke(ctx, "PUT", path, in, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("PUT /test/mixed/{resource_id}/action/{action_type} failed: %w", err)
	}
	return &out, nil
}

func (c *GinBindingTestServiceHTTPClientImpl) TestPathBinding(ctx context.Context, in *PathBindingRequest, opts ...client.CallOption) (*PathBindingResponse, error) {
	var out PathBindingResponse

	// 构建请求路径
	path := "/test/path/{id}/{name}"
	// 替换路径参数
	path = strings.ReplaceAll(path, "{id}", fmt.Sprintf("%v", in.Id))
	path = strings.ReplaceAll(path, "{name}", fmt.Sprintf("%v", in.Name))
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /test/path/{id}/{name} failed: %w", err)
	}
	return &out, nil
}

func (c *GinBindingTestServiceHTTPClientImpl) TestQueryBinding(ctx context.Context, in *QueryBindingRequest, opts ...client.CallOption) (*QueryBindingResponse, error) {
	var out QueryBindingResponse

	// 构建请求路径
	path := "/test/query"
	// GET请求
	err := c.client.Invoke(ctx, "GET", path, nil, &out, opts...)

	if err != nil {
		return nil, fmt.Errorf("GET /test/query failed: %w", err)
	}
	return &out, nil
}

// Internal structs with gin binding tags for protobuf messages

// testallbindingsGinRequest provides gin binding tags for AllBindingsRequest
type testallbindingsGinRequest struct {
	PathParam     string            `json:"path_param" uri:"path_param"`
	QueryParam    string            `json:"query_param" form:"q"`
	Page          int32             `json:"page" form:"page"`
	Limit         int32             `json:"limit" form:"limit" binding:"required,min=1,max=100"`
	UserAgent     string            `json:"user_agent" header:"User-Agent"`
	Authorization string            `json:"authorization" header:"Authorization" binding:"required"`
	ContentType   string            `json:"content_type" header:"Content-Type"`
	Title         string            `json:"title" binding:"required,min=2,max=100"`
	Description   string            `json:"description"`
	Price         float64           `json:"price" binding:"required,min=0"`
	IsActive      bool              `json:"is_active"`
	Tags          []string          `json:"tags"`
	Metadata      map[string]string `json:"metadata"`
	Email         string            `json:"email" binding:"required,email"`
	Phone         string            `json:"phone" form:"phone" binding:"required,len=11"`
}

// convertTestAllBindingsGinRequest converts from gin request struct to protobuf struct
func (r *testallbindingsGinRequest) toTestAllBindingsRequest() *AllBindingsRequest {
	return &AllBindingsRequest{
		PathParam:     r.PathParam,
		QueryParam:    r.QueryParam,
		Page:          r.Page,
		Limit:         r.Limit,
		UserAgent:     r.UserAgent,
		Authorization: r.Authorization,
		ContentType:   r.ContentType,
		Title:         r.Title,
		Description:   r.Description,
		Price:         r.Price,
		IsActive:      r.IsActive,
		Tags:          r.Tags,
		Metadata:      r.Metadata,
		Email:         r.Email,
		Phone:         r.Phone,
	}
}

// fromTestAllBindingsRequest converts from protobuf struct to gin request struct
func fromTestAllBindingsRequest(req *AllBindingsRequest) *testallbindingsGinRequest {
	return &testallbindingsGinRequest{
		PathParam:     req.PathParam,
		QueryParam:    req.QueryParam,
		Page:          req.Page,
		Limit:         req.Limit,
		UserAgent:     req.UserAgent,
		Authorization: req.Authorization,
		ContentType:   req.ContentType,
		Title:         req.Title,
		Description:   req.Description,
		Price:         req.Price,
		IsActive:      req.IsActive,
		Tags:          req.Tags,
		Metadata:      req.Metadata,
		Email:         req.Email,
		Phone:         req.Phone,
	}
}

// testformbindingGinRequest provides gin binding tags for FormBindingRequest
type testformbindingGinRequest struct {
	Username        string   `json:"username" form:"username" binding:"required,min=3,max=50"`
	Password        string   `json:"password" form:"password" binding:"required,min=8"`
	ConfirmPassword string   `json:"confirm_password" form:"confirm_password" binding:"required,eqfield=Password"`
	FileName        string   `json:"file_name" form:"file_name"`
	FileSize        int64    `json:"file_size" form:"file_size"`
	Interests       []string `json:"interests" form:"interests"`
	Gender          string   `json:"gender" form:"gender" binding:"oneof=male female other"`
	ExperienceYears int32    `json:"experience_years" form:"experience_years" binding:"min=0,max=50"`
}

// convertTestFormBindingGinRequest converts from gin request struct to protobuf struct
func (r *testformbindingGinRequest) toTestFormBindingRequest() *FormBindingRequest {
	return &FormBindingRequest{
		Username:        r.Username,
		Password:        r.Password,
		ConfirmPassword: r.ConfirmPassword,
		FileName:        r.FileName,
		FileSize:        r.FileSize,
		Interests:       r.Interests,
		Gender:          r.Gender,
		ExperienceYears: r.ExperienceYears,
	}
}

// fromTestFormBindingRequest converts from protobuf struct to gin request struct
func fromTestFormBindingRequest(req *FormBindingRequest) *testformbindingGinRequest {
	return &testformbindingGinRequest{
		Username:        req.Username,
		Password:        req.Password,
		ConfirmPassword: req.ConfirmPassword,
		FileName:        req.FileName,
		FileSize:        req.FileSize,
		Interests:       req.Interests,
		Gender:          req.Gender,
		ExperienceYears: req.ExperienceYears,
	}
}

// testheaderbindingGinRequest provides gin binding tags for HeaderBindingRequest
type testheaderbindingGinRequest struct {
	Accept         string `json:"accept" header:"Accept"`
	AcceptLanguage string `json:"accept_language" header:"Accept-Language"`
	UserAgent      string `json:"user_agent" header:"User-Agent" binding:"required"`
	XApiKey        string `json:"x_api_key" header:"X-API-Key" binding:"required,min=10"`
	XRequestId     string `json:"x_request_id" header:"X-Request-ID"`
	XRateLimit     int32  `json:"x_rate_limit" header:"X-Rate-Limit" binding:"min=1,max=1000"`
}

// convertTestHeaderBindingGinRequest converts from gin request struct to protobuf struct
func (r *testheaderbindingGinRequest) toTestHeaderBindingRequest() *HeaderBindingRequest {
	return &HeaderBindingRequest{
		Accept:         r.Accept,
		AcceptLanguage: r.AcceptLanguage,
		UserAgent:      r.UserAgent,
		XApiKey:        r.XApiKey,
		XRequestId:     r.XRequestId,
		XRateLimit:     r.XRateLimit,
	}
}

// fromTestHeaderBindingRequest converts from protobuf struct to gin request struct
func fromTestHeaderBindingRequest(req *HeaderBindingRequest) *testheaderbindingGinRequest {
	return &testheaderbindingGinRequest{
		Accept:         req.Accept,
		AcceptLanguage: req.AcceptLanguage,
		UserAgent:      req.UserAgent,
		XApiKey:        req.XApiKey,
		XRequestId:     req.XRequestId,
		XRateLimit:     req.XRateLimit,
	}
}

// testjsonbindingGinRequest provides gin binding tags for JSONBindingRequest
type testjsonbindingGinRequest struct {
	Name        string            `json:"name" binding:"required,min=2,max=100"`
	Age         int32             `json:"age" binding:"required,min=0,max=150"`
	Salary      float64           `json:"salary" binding:"min=0"`
	IsMarried   bool              `json:"is_married"`
	Hobbies     []string          `json:"hobbies" binding:"min=1"`
	Address     map[string]string `json:"address"`
	Email       string            `json:"email" binding:"required,email"`
	Website     string            `json:"website" binding:"url"`
	Mobile      string            `json:"mobile" binding:"required,len=11"`
	CustomField string            `json:"custom_field" xml:"special:value"`
}

// convertTestJSONBindingGinRequest converts from gin request struct to protobuf struct
func (r *testjsonbindingGinRequest) toTestJSONBindingRequest() *JSONBindingRequest {
	return &JSONBindingRequest{
		Name:        r.Name,
		Age:         r.Age,
		Salary:      r.Salary,
		IsMarried:   r.IsMarried,
		Hobbies:     r.Hobbies,
		Address:     r.Address,
		Email:       r.Email,
		Website:     r.Website,
		Mobile:      r.Mobile,
		CustomField: r.CustomField,
	}
}

// fromTestJSONBindingRequest converts from protobuf struct to gin request struct
func fromTestJSONBindingRequest(req *JSONBindingRequest) *testjsonbindingGinRequest {
	return &testjsonbindingGinRequest{
		Name:        req.Name,
		Age:         req.Age,
		Salary:      req.Salary,
		IsMarried:   req.IsMarried,
		Hobbies:     req.Hobbies,
		Address:     req.Address,
		Email:       req.Email,
		Website:     req.Website,
		Mobile:      req.Mobile,
		CustomField: req.CustomField,
	}
}

// testmixedbindingGinRequest provides gin binding tags for MixedBindingRequest
type testmixedbindingGinRequest struct {
	ResourceId        string            `json:"resource_id" uri:"resource_id" binding:"required,uuid"`
	ActionType        string            `json:"action_type" uri:"action_type" binding:"required,oneof=create update delete"`
	Version           string            `json:"version" form:"version" binding:"required"`
	Force             bool              `json:"force" form:"force"`
	Authorization     string            `json:"authorization" header:"Authorization" binding:"required,startswith=Bearer "`
	ContentType       string            `json:"content_type" header:"Content-Type" binding:"required"`
	IfMatch           string            `json:"if_match" header:"If-Match"`
	OperationName     string            `json:"operation_name" binding:"required"`
	Parameters        map[string]string `json:"parameters"`
	AffectedResources []string          `json:"affected_resources" binding:"min=1"`
	Timestamp         string            `json:"timestamp" binding:"required,datetime=2006-01-02T15:04:05Z07:00"`
	Checksum          string            `json:"checksum" binding:"required,len=64,hexadecimal"`
}

// convertTestMixedBindingGinRequest converts from gin request struct to protobuf struct
func (r *testmixedbindingGinRequest) toTestMixedBindingRequest() *MixedBindingRequest {
	return &MixedBindingRequest{
		ResourceId:        r.ResourceId,
		ActionType:        r.ActionType,
		Version:           r.Version,
		Force:             r.Force,
		Authorization:     r.Authorization,
		ContentType:       r.ContentType,
		IfMatch:           r.IfMatch,
		OperationName:     r.OperationName,
		Parameters:        r.Parameters,
		AffectedResources: r.AffectedResources,
		Timestamp:         r.Timestamp,
		Checksum:          r.Checksum,
	}
}

// fromTestMixedBindingRequest converts from protobuf struct to gin request struct
func fromTestMixedBindingRequest(req *MixedBindingRequest) *testmixedbindingGinRequest {
	return &testmixedbindingGinRequest{
		ResourceId:        req.ResourceId,
		ActionType:        req.ActionType,
		Version:           req.Version,
		Force:             req.Force,
		Authorization:     req.Authorization,
		ContentType:       req.ContentType,
		IfMatch:           req.IfMatch,
		OperationName:     req.OperationName,
		Parameters:        req.Parameters,
		AffectedResources: req.AffectedResources,
		Timestamp:         req.Timestamp,
		Checksum:          req.Checksum,
	}
}

// testpathbindingGinRequest provides gin binding tags for PathBindingRequest
type testpathbindingGinRequest struct {
	Id   int64  `json:"id" uri:"id" binding:"required,min=1"`
	Name string `json:"name" uri:"name" binding:"required,min=2,max=50"`
}

// convertTestPathBindingGinRequest converts from gin request struct to protobuf struct
func (r *testpathbindingGinRequest) toTestPathBindingRequest() *PathBindingRequest {
	return &PathBindingRequest{
		Id:   r.Id,
		Name: r.Name,
	}
}

// fromTestPathBindingRequest converts from protobuf struct to gin request struct
func fromTestPathBindingRequest(req *PathBindingRequest) *testpathbindingGinRequest {
	return &testpathbindingGinRequest{
		Id:   req.Id,
		Name: req.Name,
	}
}

// testquerybindingGinRequest provides gin binding tags for QueryBindingRequest
type testquerybindingGinRequest struct {
	Search         string   `json:"search" form:"search"`
	Page           int32    `json:"page" form:"page" binding:"min=1"`
	PageSize       int32    `json:"page_size" form:"page_size" binding:"min=1,max=100"`
	Categories     []string `json:"categories" form:"category"`
	IncludeDeleted bool     `json:"include_deleted" form:"include_deleted"`
	MinPrice       float64  `json:"min_price" form:"min_price"`
	MaxPrice       float64  `json:"max_price" form:"max_price"`
	StartDate      string   `json:"start_date" form:"start_date" binding:"datetime=2006-01-02"`
	EndDate        string   `json:"end_date" form:"end_date" binding:"datetime=2006-01-02"`
}

// convertTestQueryBindingGinRequest converts from gin request struct to protobuf struct
func (r *testquerybindingGinRequest) toTestQueryBindingRequest() *QueryBindingRequest {
	return &QueryBindingRequest{
		Search:         r.Search,
		Page:           r.Page,
		PageSize:       r.PageSize,
		Categories:     r.Categories,
		IncludeDeleted: r.IncludeDeleted,
		MinPrice:       r.MinPrice,
		MaxPrice:       r.MaxPrice,
		StartDate:      r.StartDate,
		EndDate:        r.EndDate,
	}
}

// fromTestQueryBindingRequest converts from protobuf struct to gin request struct
func fromTestQueryBindingRequest(req *QueryBindingRequest) *testquerybindingGinRequest {
	return &testquerybindingGinRequest{
		Search:         req.Search,
		Page:           req.Page,
		PageSize:       req.PageSize,
		Categories:     req.Categories,
		IncludeDeleted: req.IncludeDeleted,
		MinPrice:       req.MinPrice,
		MaxPrice:       req.MaxPrice,
		StartDate:      req.StartDate,
		EndDate:        req.EndDate,
	}
}
