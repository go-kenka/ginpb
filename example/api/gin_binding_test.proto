syntax = "proto3";

option go_package = "github.com/go-kenka/ginpb/example/api;api";

package example;

import "google/api/annotations.proto";
import "tag/tags.proto";

// 全面的Gin绑定测试服务
service GinBindingTestService {
  // 测试所有绑定类型的综合接口
  rpc TestAllBindings(AllBindingsRequest) returns (AllBindingsResponse) {
    option (google.api.http) = {
      post: "/test/bindings/{path_param}"
      body: "*"
    };
  }

  // 测试Query参数绑定
  rpc TestQueryBinding(QueryBindingRequest) returns (QueryBindingResponse) {
    option (google.api.http) = {
      get: "/test/query"
    };
  }

  // 测试Path参数绑定
  rpc TestPathBinding(PathBindingRequest) returns (PathBindingResponse) {
    option (google.api.http) = {
      get: "/test/path/{id}/{name}"
    };
  }

  // 测试Header绑定
  rpc TestHeaderBinding(HeaderBindingRequest) returns (HeaderBindingResponse) {
    option (google.api.http) = {
      get: "/test/header"
    };
  }

  // 测试JSON绑定
  rpc TestJSONBinding(JSONBindingRequest) returns (JSONBindingResponse) {
    option (google.api.http) = {
      post: "/test/json"
      body: "*"
    };
  }

  // 测试Form绑定
  rpc TestFormBinding(FormBindingRequest) returns (FormBindingResponse) {
    option (google.api.http) = {
      post: "/test/form"
      body: "*"
    };
  }

  // 测试混合绑定（最复杂场景）
  rpc TestMixedBinding(MixedBindingRequest) returns (MixedBindingResponse) {
    option (google.api.http) = {
      put: "/test/mixed/{resource_id}/action/{action_type}"
      body: "*"
    };
  }
}

// 所有绑定类型的综合测试
message AllBindingsRequest {
  // Path参数测试
  string path_param = 1 [(tag.uri_tag) = "path_param"];
  
  // Query参数测试
  string query_param = 2 [(tag.form_tag) = "q"];
  int32 page = 3 [(tag.form_tag) = "page"];
  int32 limit = 4 [(tag.tags) = { form: "limit", binding: "required,min=1,max=100" }];
  
  // Header测试
  string user_agent = 5 [(tag.tags) = { header: "User-Agent" }];
  string authorization = 6 [(tag.tags) = { header: "Authorization", binding: "required" }];
  string content_type = 7 [(tag.tags) = { header: "Content-Type" }];
  
  // JSON Body测试
  string title = 8 [(tag.tags) = { json: "title", binding: "required,min=2,max=100" }];
  string description = 9 [(tag.tags) = { json: "description" }];
  double price = 10 [(tag.tags) = { json: "price", binding: "required,min=0" }];
  bool is_active = 11 [(tag.tags) = { json: "is_active" }];
  
  // 复杂类型测试
  repeated string tags = 12 [(tag.tags) = { json: "tags" }];
  map<string, string> metadata = 13 [(tag.tags) = { json: "metadata" }];
  
  // 自定义验证
  string email = 14 [(tag.tags) = { json: "email", binding: "required,email" }];
  string phone = 15 [(tag.tags) = { form: "phone", binding: "required,len=11" }];
}

message AllBindingsResponse {
  bool success = 1;
  string message = 2;
  map<string, string> received_data = 3;
}

// Query绑定专项测试
message QueryBindingRequest {
  string search = 1 [(tag.form_tag) = "search"];
  int32 page = 2 [(tag.tags) = { form: "page", binding: "min=1" }];
  int32 page_size = 3 [(tag.tags) = { form: "page_size", binding: "min=1,max=100" }];
  repeated string categories = 4 [(tag.form_tag) = "category"];
  bool include_deleted = 5 [(tag.form_tag) = "include_deleted"];
  double min_price = 6 [(tag.form_tag) = "min_price"];
  double max_price = 7 [(tag.form_tag) = "max_price"];
  
  // 日期时间测试
  string start_date = 8 [(tag.tags) = { form: "start_date", binding: "datetime=2006-01-02" }];
  string end_date = 9 [(tag.tags) = { form: "end_date", binding: "datetime=2006-01-02" }];
}

message QueryBindingResponse {
  int32 total_count = 1;
  repeated string results = 2;
}

// Path参数绑定专项测试
message PathBindingRequest {
  int64 id = 1 [(tag.tags) = { uri: "id", binding: "required,min=1" }];
  string name = 2 [(tag.tags) = { uri: "name", binding: "required,min=2,max=50" }];
}

message PathBindingResponse {
  int64 id = 1;
  string name = 2;
  string full_path = 3;
}

// Header绑定专项测试
message HeaderBindingRequest {
  string accept = 1 [(tag.tags) = { header: "Accept" }];
  string accept_language = 2 [(tag.tags) = { header: "Accept-Language" }];
  string user_agent = 3 [(tag.tags) = { header: "User-Agent", binding: "required" }];
  string x_api_key = 4 [(tag.tags) = { header: "X-API-Key", binding: "required,min=10" }];
  string x_request_id = 5 [(tag.tags) = { header: "X-Request-ID" }];
  int32 x_rate_limit = 6 [(tag.tags) = { header: "X-Rate-Limit", binding: "min=1,max=1000" }];
}

message HeaderBindingResponse {
  map<string, string> headers = 1;
  string request_info = 2;
}

// JSON绑定专项测试
message JSONBindingRequest {
  // 基础类型
  string name = 1 [(tag.tags) = { json: "name", binding: "required,min=2,max=100" }];
  int32 age = 2 [(tag.tags) = { json: "age", binding: "required,min=0,max=150" }];
  double salary = 3 [(tag.tags) = { json: "salary", binding: "min=0" }];
  bool is_married = 4 [(tag.tags) = { json: "is_married" }];
  
  // 数组和对象
  repeated string hobbies = 5 [(tag.tags) = { json: "hobbies", binding: "min=1" }];
  map<string, string> address = 6 [(tag.tags) = { json: "address" }];
  
  // 验证规则测试
  string email = 7 [(tag.tags) = { json: "email", binding: "required,email" }];
  string website = 8 [(tag.tags) = { json: "website", binding: "url" }];
  string mobile = 9 [(tag.tags) = { json: "mobile", binding: "required,len=11" }];
  
  // 自定义tag测试
  string custom_field = 10 [(tag.tags) = { json: "custom_field", custom: "special:value" }];
}

message JSONBindingResponse {
  string processed_data = 1;
  int32 validation_score = 2;
}

// Form绑定专项测试  
message FormBindingRequest {
  string username = 1 [(tag.tags) = { form: "username", binding: "required,min=3,max=50" }];
  string password = 2 [(tag.tags) = { form: "password", binding: "required,min=8" }];
  string confirm_password = 3 [(tag.tags) = { form: "confirm_password", binding: "required,eqfield=Password" }];
  
  // 文件上传相关
  string file_name = 4 [(tag.form_tag) = "file_name"];
  int64 file_size = 5 [(tag.form_tag) = "file_size"];
  
  // 多选框
  repeated string interests = 6 [(tag.form_tag) = "interests"];
  
  // 单选框
  string gender = 7 [(tag.tags) = { form: "gender", binding: "oneof=male female other" }];
  
  // 数字类型
  int32 experience_years = 8 [(tag.tags) = { form: "experience_years", binding: "min=0,max=50" }];
}

message FormBindingResponse {
  bool registration_success = 1;
  string user_id = 2;
  repeated string warnings = 3;
}

// 混合绑定测试（最复杂场景）
message MixedBindingRequest {
  // URI参数
  string resource_id = 1 [(tag.tags) = { uri: "resource_id", binding: "required,uuid" }];
  string action_type = 2 [(tag.tags) = { uri: "action_type", binding: "required,oneof=create update delete" }];
  
  // Query参数
  string version = 3 [(tag.tags) = { form: "version", binding: "required" }];
  bool force = 4 [(tag.form_tag) = "force"];
  
  // Header参数
  string authorization = 5 [(tag.tags) = { header: "Authorization", binding: "required,startswith=Bearer " }];
  string content_type = 6 [(tag.tags) = { header: "Content-Type", binding: "required" }];
  string if_match = 7 [(tag.tags) = { header: "If-Match" }];
  
  // JSON Body
  string operation_name = 8 [(tag.tags) = { json: "operation_name", binding: "required" }];
  map<string, string> parameters = 9 [(tag.tags) = { json: "parameters" }];
  repeated string affected_resources = 10 [(tag.tags) = { json: "affected_resources", binding: "min=1" }];
  
  // 时间戳
  string timestamp = 11 [(tag.tags) = { json: "timestamp", binding: "required,datetime=2006-01-02T15:04:05Z07:00" }];
  
  // 自定义验证
  string checksum = 12 [(tag.tags) = { json: "checksum", binding: "required,len=64,hexadecimal" }];
}

message MixedBindingResponse {
  string operation_id = 1;
  string status = 2;
  map<string, string> result = 3;
  repeated string validation_errors = 4;
}