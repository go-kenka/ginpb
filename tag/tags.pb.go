// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.12.4
// source: tag/tags.proto

package tag

import (
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FieldTags defines custom Go struct tags for gin framework
type FieldTags struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// form tag for query parameters and form data binding
	Form *string `protobuf:"bytes,1,opt,name=form,proto3,oneof" json:"form,omitempty"`
	// uri tag for path parameters binding
	Uri *string `protobuf:"bytes,2,opt,name=uri,proto3,oneof" json:"uri,omitempty"`
	// json tag for JSON binding (usually auto-generated from field name)
	Json *string `protobuf:"bytes,3,opt,name=json,proto3,oneof" json:"json,omitempty"`
	// header tag for HTTP header binding
	Header *string `protobuf:"bytes,4,opt,name=header,proto3,oneof" json:"header,omitempty"`
	// binding tag for validation rules (e.g., "required", "min=1")
	Binding *string `protobuf:"bytes,5,opt,name=binding,proto3,oneof" json:"binding,omitempty"`
	// validate tag for protoc-gen-validate compatibility
	Validate *string `protobuf:"bytes,6,opt,name=validate,proto3,oneof" json:"validate,omitempty"`
	// xml tag for XML binding
	Xml *string `protobuf:"bytes,7,opt,name=xml,proto3,oneof" json:"xml,omitempty"`
	// yaml tag for YAML binding
	Yaml *string `protobuf:"bytes,8,opt,name=yaml,proto3,oneof" json:"yaml,omitempty"`
	// toml tag for TOML binding
	Toml *string `protobuf:"bytes,9,opt,name=toml,proto3,oneof" json:"toml,omitempty"`
	// protobuf tag for ProtoBuf binding
	Protobuf *string `protobuf:"bytes,10,opt,name=protobuf,proto3,oneof" json:"protobuf,omitempty"`
	// msgpack tag for MsgPack binding
	Msgpack *string `protobuf:"bytes,11,opt,name=msgpack,proto3,oneof" json:"msgpack,omitempty"`
	// multipart tag for multipart form binding
	Multipart *string `protobuf:"bytes,12,opt,name=multipart,proto3,oneof" json:"multipart,omitempty"`
	// custom tag for any other custom tags
	Custom        *string `protobuf:"bytes,13,opt,name=custom,proto3,oneof" json:"custom,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldTags) Reset() {
	*x = FieldTags{}
	mi := &file_tag_tags_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldTags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldTags) ProtoMessage() {}

func (x *FieldTags) ProtoReflect() protoreflect.Message {
	mi := &file_tag_tags_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldTags.ProtoReflect.Descriptor instead.
func (*FieldTags) Descriptor() ([]byte, []int) {
	return file_tag_tags_proto_rawDescGZIP(), []int{0}
}

func (x *FieldTags) GetForm() string {
	if x != nil && x.Form != nil {
		return *x.Form
	}
	return ""
}

func (x *FieldTags) GetUri() string {
	if x != nil && x.Uri != nil {
		return *x.Uri
	}
	return ""
}

func (x *FieldTags) GetJson() string {
	if x != nil && x.Json != nil {
		return *x.Json
	}
	return ""
}

func (x *FieldTags) GetHeader() string {
	if x != nil && x.Header != nil {
		return *x.Header
	}
	return ""
}

func (x *FieldTags) GetBinding() string {
	if x != nil && x.Binding != nil {
		return *x.Binding
	}
	return ""
}

func (x *FieldTags) GetValidate() string {
	if x != nil && x.Validate != nil {
		return *x.Validate
	}
	return ""
}

func (x *FieldTags) GetXml() string {
	if x != nil && x.Xml != nil {
		return *x.Xml
	}
	return ""
}

func (x *FieldTags) GetYaml() string {
	if x != nil && x.Yaml != nil {
		return *x.Yaml
	}
	return ""
}

func (x *FieldTags) GetToml() string {
	if x != nil && x.Toml != nil {
		return *x.Toml
	}
	return ""
}

func (x *FieldTags) GetProtobuf() string {
	if x != nil && x.Protobuf != nil {
		return *x.Protobuf
	}
	return ""
}

func (x *FieldTags) GetMsgpack() string {
	if x != nil && x.Msgpack != nil {
		return *x.Msgpack
	}
	return ""
}

func (x *FieldTags) GetMultipart() string {
	if x != nil && x.Multipart != nil {
		return *x.Multipart
	}
	return ""
}

func (x *FieldTags) GetCustom() string {
	if x != nil && x.Custom != nil {
		return *x.Custom
	}
	return ""
}

var file_tag_tags_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*FieldTags)(nil),
		Field:         50001,
		Name:          "tag.tags",
		Tag:           "bytes,50001,opt,name=tags",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50002,
		Name:          "tag.form_tag",
		Tag:           "bytes,50002,opt,name=form_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50003,
		Name:          "tag.uri_tag",
		Tag:           "bytes,50003,opt,name=uri_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50004,
		Name:          "tag.header_tag",
		Tag:           "bytes,50004,opt,name=header_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50005,
		Name:          "tag.binding_tag",
		Tag:           "bytes,50005,opt,name=binding_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50006,
		Name:          "tag.xml_tag",
		Tag:           "bytes,50006,opt,name=xml_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50007,
		Name:          "tag.yaml_tag",
		Tag:           "bytes,50007,opt,name=yaml_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50008,
		Name:          "tag.toml_tag",
		Tag:           "bytes,50008,opt,name=toml_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50009,
		Name:          "tag.protobuf_tag",
		Tag:           "bytes,50009,opt,name=protobuf_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50010,
		Name:          "tag.msgpack_tag",
		Tag:           "bytes,50010,opt,name=msgpack_tag",
		Filename:      "tag/tags.proto",
	},
	{
		ExtendedType:  (*descriptor.FieldOptions)(nil),
		ExtensionType: (*string)(nil),
		Field:         50011,
		Name:          "tag.multipart_tag",
		Tag:           "bytes,50011,opt,name=multipart_tag",
		Filename:      "tag/tags.proto",
	},
}

// Extension fields to descriptor.FieldOptions.
var (
	// optional tag.FieldTags tags = 50001;
	E_Tags = &file_tag_tags_proto_extTypes[0]
	// Shortcut for form binding
	//
	// optional string form_tag = 50002;
	E_FormTag = &file_tag_tags_proto_extTypes[1]
	// Shortcut for uri binding
	//
	// optional string uri_tag = 50003;
	E_UriTag = &file_tag_tags_proto_extTypes[2]
	// Shortcut for header binding
	//
	// optional string header_tag = 50004;
	E_HeaderTag = &file_tag_tags_proto_extTypes[3]
	// Shortcut for binding validation
	//
	// optional string binding_tag = 50005;
	E_BindingTag = &file_tag_tags_proto_extTypes[4]
	// Shortcut for xml binding
	//
	// optional string xml_tag = 50006;
	E_XmlTag = &file_tag_tags_proto_extTypes[5]
	// Shortcut for yaml binding
	//
	// optional string yaml_tag = 50007;
	E_YamlTag = &file_tag_tags_proto_extTypes[6]
	// Shortcut for toml binding
	//
	// optional string toml_tag = 50008;
	E_TomlTag = &file_tag_tags_proto_extTypes[7]
	// Shortcut for protobuf binding
	//
	// optional string protobuf_tag = 50009;
	E_ProtobufTag = &file_tag_tags_proto_extTypes[8]
	// Shortcut for msgpack binding
	//
	// optional string msgpack_tag = 50010;
	E_MsgpackTag = &file_tag_tags_proto_extTypes[9]
	// Shortcut for multipart binding
	//
	// optional string multipart_tag = 50011;
	E_MultipartTag = &file_tag_tags_proto_extTypes[10]
)

var File_tag_tags_proto protoreflect.FileDescriptor

var file_tag_tags_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x74, 0x61, 0x67, 0x2f, 0x74, 0x61, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x03, 0x74, 0x61, 0x67, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x04, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x08,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x78,
	0x6d, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x88,
	0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x07, 0x52, 0x04, 0x79, 0x61, 0x6d, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x74,
	0x6f, 0x6d, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x74, 0x6f, 0x6d,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x09, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x69, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x78, 0x6d, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79,
	0x61, 0x6d, 0x6c, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x6f, 0x6d, 0x6c, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x73,
	0x67, 0x70, 0x61, 0x63, 0x6b, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x61, 0x72, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x3a, 0x46,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd1, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x74, 0x61, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x73, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x3a, 0x3d, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74,
	0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd2, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x3b, 0x0a, 0x07, 0x75, 0x72, 0x69, 0x5f, 0x74, 0x61, 0x67,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd3, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x72, 0x69, 0x54, 0x61, 0x67, 0x88,
	0x01, 0x01, 0x3a, 0x41, 0x0a, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67,
	0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0xd4, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x43, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xd5, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x3b, 0x0a, 0x07, 0x78, 0x6d,
	0x6c, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd6, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x78, 0x6d,
	0x6c, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x3d, 0x0a, 0x08, 0x79, 0x61, 0x6d, 0x6c, 0x5f,
	0x74, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0xd7, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x61, 0x6d, 0x6c,
	0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x3d, 0x0a, 0x08, 0x74, 0x6f, 0x6d, 0x6c, 0x5f, 0x74,
	0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xd8, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6d, 0x6c, 0x54,
	0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x45, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd9, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x3a, 0x43, 0x0a, 0x0b,
	0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xda, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x73, 0x67, 0x70, 0x61, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x88, 0x01,
	0x01, 0x3a, 0x47, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x61, 0x67, 0x12, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0xdb, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x61, 0x72, 0x74, 0x54, 0x61, 0x67, 0x88, 0x01, 0x01, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6b, 0x65, 0x6e, 0x6b,
	0x61, 0x2f, 0x67, 0x69, 0x6e, 0x70, 0x62, 0x2f, 0x74, 0x61, 0x67, 0x3b, 0x74, 0x61, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tag_tags_proto_rawDescOnce sync.Once
	file_tag_tags_proto_rawDescData = file_tag_tags_proto_rawDesc
)

func file_tag_tags_proto_rawDescGZIP() []byte {
	file_tag_tags_proto_rawDescOnce.Do(func() {
		file_tag_tags_proto_rawDescData = protoimpl.X.CompressGZIP(file_tag_tags_proto_rawDescData)
	})
	return file_tag_tags_proto_rawDescData
}

var file_tag_tags_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_tag_tags_proto_goTypes = []any{
	(*FieldTags)(nil),               // 0: tag.FieldTags
	(*descriptor.FieldOptions)(nil), // 1: google.protobuf.FieldOptions
}
var file_tag_tags_proto_depIdxs = []int32{
	1,  // 0: tag.tags:extendee -> google.protobuf.FieldOptions
	1,  // 1: tag.form_tag:extendee -> google.protobuf.FieldOptions
	1,  // 2: tag.uri_tag:extendee -> google.protobuf.FieldOptions
	1,  // 3: tag.header_tag:extendee -> google.protobuf.FieldOptions
	1,  // 4: tag.binding_tag:extendee -> google.protobuf.FieldOptions
	1,  // 5: tag.xml_tag:extendee -> google.protobuf.FieldOptions
	1,  // 6: tag.yaml_tag:extendee -> google.protobuf.FieldOptions
	1,  // 7: tag.toml_tag:extendee -> google.protobuf.FieldOptions
	1,  // 8: tag.protobuf_tag:extendee -> google.protobuf.FieldOptions
	1,  // 9: tag.msgpack_tag:extendee -> google.protobuf.FieldOptions
	1,  // 10: tag.multipart_tag:extendee -> google.protobuf.FieldOptions
	0,  // 11: tag.tags:type_name -> tag.FieldTags
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	11, // [11:12] is the sub-list for extension type_name
	0,  // [0:11] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_tag_tags_proto_init() }
func file_tag_tags_proto_init() {
	if File_tag_tags_proto != nil {
		return
	}
	file_tag_tags_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tag_tags_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 11,
			NumServices:   0,
		},
		GoTypes:           file_tag_tags_proto_goTypes,
		DependencyIndexes: file_tag_tags_proto_depIdxs,
		MessageInfos:      file_tag_tags_proto_msgTypes,
		ExtensionInfos:    file_tag_tags_proto_extTypes,
	}.Build()
	File_tag_tags_proto = out.File
	file_tag_tags_proto_rawDesc = nil
	file_tag_tags_proto_goTypes = nil
	file_tag_tags_proto_depIdxs = nil
}
